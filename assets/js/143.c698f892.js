(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{638:function(t,a,s){"use strict";s.r(a);var r=s(6),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[t._v("Kafka是基于消息发布/订阅模式实现的消息系统，其主要设计⽬标如下：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("消息持久化")]),t._v("：以时间复杂度为O(1)的⽅式提供消息持久化能⼒，即使对TB级以上数据也能保证常 数时间复杂度的访问性能。")]),t._v(" "),s("li",[s("strong",[t._v("⾼吞吐")]),t._v("：在廉价的商⽤机器上也能⽀持单机每秒100K条以上的吞吐量")]),t._v(" "),s("li",[s("strong",[t._v("分布式")]),t._v("：⽀持消息分区以及分布式消费，并保证分区内的消息顺序")]),t._v(" "),s("li",[s("strong",[t._v("跨平台")]),t._v("：⽀持不同技术平台的客户端（如：Java、PHP、Python等）")]),t._v(" "),s("li",[s("strong",[t._v("实时性")]),t._v("：⽀持实时数据处理和离线数据处理 伸缩性：⽀持⽔平扩展")])]),t._v(" "),s("p",[t._v("Kafka中涉及的⼀些基本概念：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Broker")]),t._v("：Kafka集群包含⼀个或多个服务器，这些服务器被称为Broker")]),t._v(" "),s("li",[s("strong",[t._v("Topic")]),t._v("：逻辑上同Rabbit的Queue队列相似，每条发布到Kafka集群的消息都必须有⼀个Topic。 （物理上不同Topic的消息分开存储，逻辑上⼀个Topic的消息虽然保存于⼀个或多个Broker上，但 ⽤户只需指定消息的Topic即可⽣产或消费数据⽽不必关⼼数据存于何处）")]),t._v(" "),s("li",[s("strong",[t._v("Partition")]),t._v("：Partition是物理概念上的分区，为了提供系统吞吐率，在物理上每个Topic会分成⼀个或 多个Partition，每个Partition对应⼀个⽂件夹（存储对应分区的消息内容和索引⽂件）。")]),t._v(" "),s("li",[s("strong",[t._v("Producer")]),t._v("：消息⽣产者，负责⽣产消息并发送到Kafka Broker。")]),t._v(" "),s("li",[s("strong",[t._v("Consumer")]),t._v("：消息消费者，向Kafka\tBroker读取消息并处理的客户端。")]),t._v(" "),s("li",[s("strong",[t._v("Consumer Group")]),t._v("：每个Consumer属于⼀个特定的组（可为每个Consumer指定属于⼀个组，若 不指定则属于默认组），组可以⽤来实现⼀条消息被组内多个成员消费等功能。")])]),t._v(" "),s("h3",{attrs:{id:"安装下载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装下载"}},[t._v("#")]),t._v(" 安装下载")]),t._v(" "),s("p",[t._v("下载地址：http://kafka.apache.org/downloads.html")]),t._v(" "),s("blockquote",[s("p",[t._v("由于 Kafka 的设计中依赖了ZooKeeper,所以在 config ⽬录中，则是⽤来存放了关于Kafka与ZooKeeper的配置信息")])]),t._v(" "),s("p",[t._v("启动Kafka，执⾏命令："),s("code",[t._v("kafka-server-start config/server.properties")])]),t._v(" "),s("p",[t._v("创建Topic，执⾏命令："),s("code",[t._v("kafka-topics --create --zookeeper\tlocalhost:2181 -replication-factor\t1 --partitions 1 --topic test")])]),t._v(" "),s("p",[t._v("查看当前的Topic：\t"),s("code",[t._v("kafka-topics --list -zookeeper\tlocalhost:2181")])]),t._v(" "),s("p",[t._v("创建消息⽣产者："),s("code",[t._v("kafka-console-producer\t--broker-list localhost:9092 -topic test")])]),t._v(" "),s("p",[t._v("创建消息消费者："),s("code",[t._v("kafka-console-consumer\t--zookeeper localhost:2181 --topic test --from-beginning")])]),t._v(" "),s("h3",{attrs:{id:"整合spring-cloud-bus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整合spring-cloud-bus"}},[t._v("#")]),t._v(" 整合Spring Cloud Bus")]),t._v(" "),s("p",[t._v("在上⼀篇使⽤Rabbit实现消息总线的案例中，\n1、添加依赖：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-bus-kafka"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("2、添加配置：")]),t._v(" "),s("div",{staticClass:"language-properties extra-class"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[t._v("//Kafka的服务端列表\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cloud.stream.kafka.binder.brokers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("localhost")]),t._v("\n//Kafka服务端的默认端⼝\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cloud.stream.kafka.binder.defaultBrokerPort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("9092")]),t._v("\n//ZooKeeper节点列表\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cloud.stream.kafka.binder.zkNodes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("localhost")]),t._v("\n//ZooKeeper节点的默认端⼝\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cloud.stream.kafka.binder.defaultZkPort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2181")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);