(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{622:function(e,o,v){"use strict";v.r(o);var _=v(6),i=Object(_.a)({},(function(){var e=this,o=e.$createElement,v=e._self._c||o;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h3",{attrs:{id:"_1、注解-annotations-列表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、注解-annotations-列表"}},[e._v("#")]),e._v(" 1、注解(annotations)列表")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("@SpringBootApplication")]),e._v("：等同于@ComponentScan、@Configuration和@EnableAutoConfiguration三个注解。其中@\n让spring Boot扫描到Configuration类并把它加入到程序上下文。")]),e._v(" "),v("li",[v("code",[e._v("@RestController")]),e._v(":注解是@Controller和@ResponseBody的合集,表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器。")]),e._v(" "),v("li",[v("code",[e._v("@Value")]),e._v("：注入Spring boot application.properties配置的属性的值。")]),e._v(" "),v("li",[v("code",[e._v("@RepositoryRestResourcepublic")]),e._v(":配合spring-boot-starter-data-rest使用。")]),e._v(" "),v("li",[v("code",[e._v("@CrossOrigin")]),e._v(":跨域访问")])]),e._v(" "),v("blockquote",[v("p",[e._v('@value("value")     //注入普通字符串\n@value(“#{systemProperties[\'os.name\']}”)   //注入操作系统属性\n@Value("T(java.lang.Math).random()*100.0")  //注入表达式结果\n@Value("#{beanInject.another}")   //注入其他bean\n@Value("classpath:com/hry/spring/config")     //注入文件资源\n@Value("http://baidu.com")    //注入URL资源')])]),e._v(" "),v("h3",{attrs:{id:"_2、jpa注解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、jpa注解"}},[e._v("#")]),e._v(" 2、JPA注解")]),e._v(" "),v("ul",[v("li",[v("code",[e._v('@Entity：@Table(name="")')]),e._v("：表明这是一个实体类。一般用于jpa这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略")]),e._v(" "),v("li",[v("code",[e._v("@Valid")]),e._v("：验证数据校验（对象）")]),e._v(" "),v("li",[v("code",[e._v("@MappedSuperClass")]),e._v(":用在确定是父类的entity上。父类的属性子类可以继承。")]),e._v(" "),v("li",[v("code",[e._v("@NoRepositoryBean")]),e._v(":一般用作父类的repository，有这个注解，spring不会去实例化该repository。")]),e._v(" "),v("li",[v("code",[e._v("@Column")]),e._v("：如果字段名与列名相同，则可以省略。")]),e._v(" "),v("li",[v("code",[e._v("@Id")]),e._v("：表示该属性为主键。")]),e._v(" "),v("li",[v("code",[e._v('@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="repair_seq")')]),e._v("：表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq。")]),e._v(" "),v("li",[v("code",[e._v('@SequenceGeneretor(name="repair_seq",sequenceName="seq_repair",allocationSize=1)')]),e._v("：name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致。")]),e._v(" "),v("li",[v("code",[e._v("@Transient")]),e._v("：表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式")]),e._v(" "),v("li",[v("code",[e._v("@JsonIgnore")]),e._v("：作用是json序列化时将Java bean中的一些属性忽略掉,序列化和反序列化都受影响。")]),e._v(" "),v("li",[v("code",[e._v('@JoinColumn（name="loginId"）')]),e._v(":一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。")]),e._v(" "),v("li",[v("code",[e._v("@OneToOne、@OneToMany、@ManyToOne")]),e._v("：对应hibernate配置文件中的一对一，一对多，多对一。")]),e._v(" "),v("li",[v("code",[e._v("@Validated、@Valid")]),e._v("：都可对参数进行校验，可用在方法和方法参数上，区别是 @Valid能加在成员属性上，实现嵌套验证（因为对于list集合，单纯的添加注解是完成不了的，必须要在实体类上天剑@Valid完成嵌套功能）。")])]),e._v(" "),v("h3",{attrs:{id:"_3、spring-mvc相关注解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、spring-mvc相关注解"}},[e._v("#")]),e._v(" 3、Spring MVC相关注解")]),e._v(" "),v("ul",[v("li",[v("p",[v("code",[e._v("@Controller")]),e._v("：用于定义控制器类。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Service：")]),e._v(" : 修饰service层的组件.")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Repository")]),e._v("：修饰DAO或者repositories。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@RequestMapping")]),e._v("：提供路由信息，负责URL到Controller中的具体函数的映射。该注解有六个属性：")])])]),e._v(" "),v("blockquote",[v("p",[e._v("params:指定request中必须包含某些参数值是，才让该方法处理。\nheaders:指定request中必须包含某些指定的header值，才能让该方法处理请求。\nvalue:指定请求的实际地址，指定的地址可以是URI Template 模式\nmethod:指定请求的method类型， GET、POST、PUT、DELETE等\nconsumes:指定处理请求的提交内容类型（Content-Type），如application/json,text/html;\nproduces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回")])]),e._v(" "),v("p",[e._v("当然可以"),v("code",[e._v("用@GetMapping")]),e._v("、"),v("code",[e._v("@PostMapping")]),e._v("等替代。如："),v("code",[e._v('@GetMapping(value = {"/info", "/info/{username}"})')])]),e._v(" "),v("ul",[v("li",[v("p",[v("code",[e._v("@ModelAttribute")]),e._v(":标记在方法上，会在标记了"),v("code",[e._v("@RequestMapping")]),e._v("的方法前执行；标记在方法的参数上，会将请求参数按名称注入到指定对象中，并且会将这个对象自动加入ModelMap中，便于View层使用")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@ComponentScan")]),e._v(": 组件扫描，可自动发现和装配一些Bean，并注入到IOC容器中。如")])])]),e._v(" "),v("p",[e._v("@Component、@Service、 @Repository、 @Controller、@Entity 等等")]),e._v(" "),v("ul",[v("li",[v("p",[v("code",[e._v("@Component")]),e._v("：定义Spring管理Bean，泛指组件。它的扩展类有：@Repository、@Service、@Controller")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Configuration")]),e._v(": 等同于spring的XML配置文件中的 "),v("code",[e._v("<beans>")]),e._v("，作用为：配置 spring 容器(应用上下文)；使用Java代码可以检查类型安全，代替applicationContext.xml。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@EnableAutoConfiguration")]),e._v(": 自动配置。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@RequestParam")]),e._v("：用在方法的参数前面")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@RequestBody")]),e._v("、"),v("code",[e._v("@ResonseBody")]),e._v("、"),v("code",[e._v("@RathVariable")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Autowired")]),e._v(":自动导入依赖的bean，默认按byType注入。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@PathVariable")]),e._v(":获取参数,与"),v("code",[e._v("@RequestParam")]),e._v("区别在于，能够自动识别处模板。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Component")]),e._v(":可配合CommandLineRunner使用，在程序启动后执行一些基础任务。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Bean")]),e._v("：用@Bean标注方法等价于XML中配置的bean。作用为：注册 bean 对象")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Qualifier")]),e._v('：当有多个同一类型的Bean时，可以用@Qualifier("name")来指定。')])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Inject")]),e._v("：等价于默认的@Autowired，只是没有required属性。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@JsonBackReference")]),e._v("：解决嵌套外链问题。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Import")]),e._v("：用来导入其他配置类中的bean属性。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@ImportResource")]),e._v("：用来加载自定义的xml配置文件。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v('@Resource(name="name",type="type")')]),e._v("：与@Autowired类似，默认按byName注入。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Jsonfield注解")]),e._v("：设置方法或者属性的setter和getter方法。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Pointcut")]),e._v("：拦截的切入点方法，注解的在方法级别之上，但是不执行方法体，只表示切入点的入口。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Around")]),e._v("：判断是否执行以上的拦截,后面跟的值为申明切入点的方法名，而该注解申明的方法的第一个参数必须ProceedingJoinPoint。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Cacheable")]),e._v("：支持缓存，指定三个属性，value、key和condition。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@CachePut")]),e._v("：主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发真实方法的调用。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@CacheEvict")]),e._v("：主要针对方法配置，能够根据一定的条件对缓存进行清空。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@Scope")]),e._v("：用来配置 spring bean 的作用域。singleton:单例模式,全局有且仅有一个实例；\nprototype:原型模式,每次获取Bean的时候会有一个新的实例；request:request表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP request内有效；session:session作用域表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP session内有效；global session:只在portal应用中有用，给每一个 global http session 新建一个Bean实例。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v('@SessionAttributes(value={"names"},types={Integer.class})')]),e._v("：默认情况下Spring MVC将模型中的数据存储到request域中。当一个请求结束后，数据就失效了。如果要跨页面使用。那么需要使用到session。而@SessionAttributes注解就可以使得模型中的数据存储一份到session域中")])])]),e._v(" "),v("h3",{attrs:{id:"_4、全局异常处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、全局异常处理"}},[e._v("#")]),e._v(" 4、全局异常处理")]),e._v(" "),v("ul",[v("li",[v("p",[v("code",[e._v("@ControllerAdvice")]),e._v("：包含@Component。可以被扫描到。统一处理异常。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("@ExceptionHandler（Exception.class）")]),e._v("：用在方法上面表示遇到这个异常就执行以下方法。")])])]),e._v(" "),v("h3",{attrs:{id:"_5、其他spring-boot相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5、其他spring-boot相关"}},[e._v("#")]),e._v(" 5、其他Spring Boot相关")]),e._v(" "),v("ul",[v("li",[e._v("1、"),v("code",[e._v("@EnableScheduling")]),e._v(": 启用定时任务的配置（启动类）\n与"),v("code",[e._v("@Scheduled")]),e._v("（任务类）搭配使用。")])]),e._v(" "),v("blockquote",[v("p",[e._v('@Scheduled(fixedRate = 5000) ：上一次开始执行时间点之后5秒再执行\n@Scheduled(fixedDelay = 5000) ：上一次执行完毕时间点之后5秒再执行\n@Scheduled(initialDelay=1000, fixedRate=5000) ：第一次延迟1秒后执行，之后按fixedRate的规则每5秒执行一次\n@Scheduled(cron="*/5 * * * * '),v("em",[e._v('") ：通过cron表达式定义规则，依次对应 秒 分钟 小时 天 月 星期 年份。“')]),e._v("”字符代表所有可能的值，“/”字符用来指定数值的增量，“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值，当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”，“L” 字符仅被用于天（月）和天（星期）两个子表达式，“6L”表示这个月的倒数第６天，W 字符代表着平日(Mon-Fri)，并且仅能用于日域中。例如，日域中的 15W 意味着 “离该月15号的最近一个平日。” 假如15号是星期六，那么 trigger 会在14号(星期五)触发，因为星期四比星期一离15号更近。C：代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天。")])]),e._v(" "),v("ul",[v("li",[e._v("2、"),v("code",[e._v("@Async")]),e._v("：实现异步调用")]),e._v(" "),v("li",[e._v("3、"),v("code",[e._v("@Aspect")]),e._v(":切面编程。与@Pointcut、@Before、@After、@AfterReturning等配合使用。")]),e._v(" "),v("li",[e._v("4、"),v("code",[e._v("@EnableCaching")]),e._v(":开启缓存功能（启动类）。与"),v("code",[e._v("@CacheConfig")]),e._v("和"),v("code",[e._v("@Cacheable")]),e._v("一起使用（配置类）。\n缓存配置这里不叙述，可自行百度，推荐使用redis或ecache，"),v("a",{attrs:{href:"http://blog.csdn.net/vbirdbest/article/details/72763048",target:"_blank",rel:"noopener noreferrer"}},[e._v("EhCache学习"),v("OutboundLink")],1)]),e._v(" "),v("li",[e._v("5、"),v("code",[e._v("@PostConstruct")]),e._v("：在构造函数执行后执行，init()方法之前执行； "),v("code",[e._v("@PreDestory")]),e._v("：在Bean销毁之前执行，即destroy()方法之后执行，都只会执行一次。")]),e._v(" "),v("li",[e._v("6、"),v("code",[e._v("@EnableAsync")]),e._v(":开启异步任务支持 ；"),v("code",[e._v("@Async")]),e._v(":注解该方法/类为异步方法。")]),e._v(" "),v("li",[e._v("7、"),v("code",[e._v("@EnableScheduling")]),e._v(":开启定时任务； "),v("code",[e._v("@Scheduled(fixedDelay = 1000*60)")]),e._v(":定时任务，60s执行一次。")]),e._v(" "),v("li",[e._v("8、"),v("code",[e._v("@Conditional")]),e._v("：条件匹配注解，满足一定的条件给容器注册bean。")]),e._v(" "),v("li",[e._v("9、"),v("code",[e._v("@ControllerAdvice")]),e._v("：将全局配置放在同一位置（类上）。友联此注解，可用 "),v("code",[e._v("@ExceptionHandler")]),e._v("：全局处理异常。"),v("code",[e._v("@ModelAttribute")]),e._v(":将键值对绑定到model里，让全局@RequestMapping都可获得该值。")]),e._v(" "),v("li",[e._v("10、"),v("code",[e._v("@CachePut")]),e._v("：缓存新增的或更新数据到缓存; "),v("code",[e._v("@CacheEvict")]),e._v(":缓存删除后的数据。"),v("code",[e._v("@Cacheable")]),e._v("：缓存key的数据。")]),e._v(" "),v("li",[e._v("11、"),v("code",[e._v("@ConfigurationProperties")]),e._v('：作用就是通过它可以把properties或者yml配置中的配置文件直接转成对象。@ConfigurationProperties(prefix = "sms")申明配置的前缀为sms。')]),e._v(" "),v("li",[e._v("12、"),v("code",[e._v('@PropertySource("classpath:global.properties")')]),e._v(": 等价于"),v("code",[e._v("@ConfigurationProperties")]),e._v("，前者需要指明具体的文件路径和后缀，后者可以自动读取.yml和.properties文件。配置文件中的参数若有分层结构，只需加上对应的前缀即可。")]),e._v(" "),v("li",[e._v("13、"),v("code",[e._v("@RefreshScope")]),e._v("： 动态刷新配置。当boot中的properties值改变，SpringCloud触发，主要用于更改了配置文件，实现配置文件的动态刷新。")]),e._v(" "),v("li",[e._v("14、"),v("code",[e._v("@ConditionalOnExpression()")]),e._v("：在特定情况下使用相关配置或者实例化bean。")]),e._v(" "),v("li",[e._v("15、"),v("code",[e._v('@ConfigurationProperties(prefix="xxx")')]),e._v("：把使用统一前缀的同类的配置信息")]),e._v(" "),v("li",[e._v("16、"),v("code",[e._v("@Primary")]),e._v("：自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常")]),e._v(" "),v("li",[e._v("17、"),v("code",[e._v("@EnableAuthorizationServer")]),e._v("：配置授权服务OAuth2")]),e._v(" "),v("li",[e._v("18、"),v("code",[e._v("@SpringCloudApplication")]),e._v("：该注解，整合了@SpringBootApplication、@EnableDiscoveryClient、@EnableCircuitBreaker")]),e._v(" "),v("li",[e._v("19、"),v("code",[e._v("@PreAuthorize")]),e._v("：配置接口权限校验，先验证")]),e._v(" "),v("li",[e._v("20、"),v("code",[e._v("@EnableGlobalMethodSecurity(prePostEnabled = true)")]),e._v("：在WebSecurityConfigurerAdapter 的继承类上加，与19对应使用")]),e._v(" "),v("li",[e._v("21、"),v("code",[e._v("@EnableAsync")]),e._v(":开启多线程执行，尤其在多个定时任务"),v("code",[e._v("@Scheduled")]),e._v("中使用较多。")])]),e._v(" "),v("h3",{attrs:{id:"_6、springcloud-相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6、springcloud-相关"}},[e._v("#")]),e._v(" 6、SpringCloud 相关")]),e._v(" "),v("ul",[v("li",[e._v("1、"),v("code",[e._v("@SpringCloudApplication")]),e._v("：包括@SpringBootApplication、@EnableDiscoveryClient、@EnableCircuitBreaker，分别是SpringBoot注解、注册服务中心Eureka注解、断路器注解。")])]),e._v(" "),v("h3",{attrs:{id:"_7、其他"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7、其他"}},[e._v("#")]),e._v(" 7、其他")]),e._v(" "),v("ul",[v("li",[e._v("@Consumes 注释代表的是一个资源可以接受的 MIME 类型。")]),e._v(" "),v("li",[e._v("@Produces 注释代表的是一个资源可以返回的 MIME 类型。")]),e._v(" "),v("li",[e._v("@JsonView注解是jackson json中的一个注解，主要作用是SpringMVC返回时，约定某些参数不显示，隐藏。")])])])}),[],!1,null,null,null);o.default=i.exports}}]);