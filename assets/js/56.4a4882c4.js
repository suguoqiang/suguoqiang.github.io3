(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{551:function(t,e,o){"use strict";o.r(e);var n=o(6),v=Object(n.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("p",[t._v("几种常用的认证机制")]),t._v(" "),o("h3",{attrs:{id:"http-basic-auth"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#http-basic-auth"}},[t._v("#")]),t._v(" HTTP Basic Auth")]),t._v(" "),o("p",[t._v("HTTP Basic Auth简单点说明就是每次请求API时都提供用户的username和password，简言之，Basic Auth是配合RESTful API 使用的最简单的认证方式，只需提供用户名密码即可，\n但由于有把用户名密码暴露给第三方客户端的风险，在生产环境下被使用的越来越少。因此，在开发对外开放的RESTful API时，尽量避免采用HTTP Basic Auth")]),t._v(" "),o("h3",{attrs:{id:"oauth"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#oauth"}},[t._v("#")]),t._v(" OAuth")]),t._v(" "),o("p",[t._v("OAuth（开放授权）是一个开放的授权标准，允许用户让第三方应用访问该用户在某一web服务上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。")]),t._v(" "),o("p",[t._v("OAuth允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的第三方系统\n（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。\n这样，OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容")]),t._v(" "),o("p",[t._v("下面是OAuth2.0的流程：\n"),o("img",{attrs:{src:"http://cdn.gqsu.top/jwt01.png",alt:""}})]),t._v(" "),o("p",[t._v("这种基于OAuth的认证机制适用于个人消费者类的互联网产品，如社交类APP等应用，但是不太适合拥有自有认证权限管理的企业应用；")]),t._v(" "),o("h3",{attrs:{id:"cookie-auth"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#cookie-auth"}},[t._v("#")]),t._v(" Cookie Auth")]),t._v(" "),o("p",[t._v("Cookie认证机制就是为一次请求认证在服务端创建一个Session对象，同时在客户端的浏览器端创建了一个Cookie对象；\n通过客户端带上来Cookie对象来与服务器端的session对象匹配来实现状态管理的。\n默认的，当我们关闭浏览器的时候，cookie会被删除。但可以通过修改cookie 的expire time使cookie在一定时间内有效；")]),t._v(" "),o("h3",{attrs:{id:"token-auth"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#token-auth"}},[t._v("#")]),t._v(" Token Auth")]),t._v(" "),o("p",[o("img",{attrs:{src:"http://cdn.gqsu.top/jwt02.png",alt:""}})]),t._v(" "),o("p",[t._v("Token Auth的优点:")]),t._v(" "),o("p",[t._v("Token机制相对于Cookie机制又有什么好处呢？")]),t._v(" "),o("ul",[o("li",[t._v("支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户认证信息通过HTTP头传输.")]),t._v(" "),o("li",[t._v("无状态(也称：服务端可扩展行):Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.")]),t._v(" "),o("li",[t._v("更适用CDN: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片等），而你的服务端只要提供API即可.")]),t._v(" "),o("li",[t._v("去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.")]),t._v(" "),o("li",[t._v("更适用于移动应用: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。")]),t._v(" "),o("li",[t._v("CSRF:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。")]),t._v(" "),o("li",[t._v("性能: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算 的Token验证和解析要费时得多.")]),t._v(" "),o("li",[t._v("不需要为登录页面做特殊处理: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做特殊处理.")]),t._v(" "),o("li",[t._v("基于标准化:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库（.NET, Ruby, Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）.")])]),t._v(" "),o("h3",{attrs:{id:"基于jwt的token认证机制实现"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#基于jwt的token认证机制实现"}},[t._v("#")]),t._v(" 基于JWT的Token认证机制实现")]),t._v(" "),o("p",[t._v("JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。其")]),t._v(" "),o("p",[t._v("JWT的组成\n一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。\n载荷（Payload）")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v('{ \n  "iss": "Online JWT Builder", \n  "iat": 1416797419, \n  "exp": 1448333419, \n  "aud": "www.example.com", \n  "sub": "jrocket@example.com", \n  "GivenName": "Johnny", \n  "Surname": "Rocket", \n  "Email": "jrocket@example.com", \n  "Role": [ "Manager", "Project Administrator" ] \n}\n')])])]),o("ul",[o("li",[t._v("iss: 该JWT的签发者，是否使用是可选的；")]),t._v(" "),o("li",[t._v("sub: 该JWT所面向的用户，是否使用是可选的；")]),t._v(" "),o("li",[t._v("aud: 接收该JWT的一方，是否使用是可选的；")]),t._v(" "),o("li",[t._v("exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；")]),t._v(" "),o("li",[t._v("iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；\n其他还有：")]),t._v(" "),o("li",[t._v("nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；")])]),t._v(" "),o("h3",{attrs:{id:"认证过程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#认证过程"}},[t._v("#")]),t._v(" 认证过程")]),t._v(" "),o("p",[t._v("下面我们从一个实例来看如何运用JWT机制实现认证：")]),t._v(" "),o("p",[t._v("登录\n第一次认证：第一次登录，用户从浏览器输入用户名/密码，提交后到服务器的登录处理的Action层（Login Action）；\nLogin Action调用认证服务进行用户名密码认证，如果认证通过，Login Action层调用用户信息服务获取用户信息（包括完整的用户信息及对应权限信息）；\n返回用户信息后，Login Action从配置文件中获取Token签名生成的秘钥信息，进行Token的生成；\n生成Token的过程中可以调用第三方的JWT Lib生成签名后的JWT数据；\n完成JWT数据签名后，将其设置到COOKIE对象中，并重定向到首页，完成登录过程；")]),t._v(" "),o("p",[o("img",{attrs:{src:"http://cdn.gqsu.top/jwt03.png",alt:""}})]),t._v(" "),o("p",[t._v("请求认证")]),t._v(" "),o("p",[t._v("基于Token的认证机制会在每一次请求中都带上完成签名的Token信息，这个Token信息可能在COOKIE\n中，也可能在HTTP的Authorization头中；")]),t._v(" "),o("p",[t._v("客户端（APP客户端或浏览器）通过GET或POST请求访问资源（页面或调用API）；")]),t._v(" "),o("p",[t._v("认证服务作为一个Middleware HOOK 对请求进行拦截，首先在cookie中查找Token信息，如果没有找到，则在HTTP Authorization Head中查找；")]),t._v(" "),o("p",[t._v("如果找到Token信息，则根据配置文件中的签名加密秘钥，调用JWT Lib对Token信息进行解密和解码；")]),t._v(" "),o("p",[t._v("完成解码并验证签名通过后，对Token中的exp、nbf、aud等信息进行验证；")]),t._v(" "),o("p",[t._v("全部通过后，根据获取的用户的角色权限信息，进行对请求的资源的权限逻辑判断；")]),t._v(" "),o("p",[t._v("如果权限逻辑判断通过则通过Response对象返回；否则则返回HTTP 401；")]),t._v(" "),o("p",[t._v("对Token认证的五点认识")]),t._v(" "),o("p",[t._v("对Token认证机制有5点直接注意的地方：")]),t._v(" "),o("ul",[o("li",[o("p",[t._v("一个Token就是一些信息的集合；")])]),t._v(" "),o("li",[o("p",[t._v("在Token中包含足够多的信息，以便在后续请求中减少查询数据库的几率；")])]),t._v(" "),o("li",[o("p",[t._v("服务端需要对cookie和HTTP Authrorization Header进行Token信息的检查；")])]),t._v(" "),o("li",[o("p",[t._v("基于上一点，你可以用一套token认证代码来面对浏览器类客户端和非浏览器类客户端；")])]),t._v(" "),o("li",[o("p",[t._v("因为token是被签名的，所以我们可以认为一个可以解码认证通过的token是由我们系统发放的，其中带的信息是合法有效的；")])])]),t._v(" "),o("p",[t._v("参考：http://www.cnblogs.com/xiekeli/p/5607107.html")]),t._v(" "),o("p",[t._v("https://blog.csdn.net/qq_28098067/article/details/52036493")])])}),[],!1,null,null,null);e.default=v.exports}}]);