(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{562:function(t,v,e){"use strict";e.r(v);var _=e(6),i=Object(_.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("git中最重要的四个点：工作区、暂存区、本地仓库和远程仓库")]),t._v(" "),e("p",[t._v("工作区---(git add)----\x3e暂存区----(git commit)----\x3e  本地仓库 -----(git push)----\x3e  远程仓库")]),t._v(" "),e("h3",{attrs:{id:"git基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git基本操作"}},[t._v("#")]),t._v(" git基本操作")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$ git init [project-name]")]),t._v("： 初始化一个Git仓库")]),t._v(" "),e("li",[e("code",[t._v("$ git remote add origin https://github.com/suguoqiang/hexo.git")]),t._v("：添加一个origin变量代替url地址")]),t._v(" "),e("li",[e("code",[t._v("$ git clone [url]")]),t._v(":  下载远程仓库的项目到本地")]),t._v(" "),e("li",[e("code",[t._v("$ git add <file>")]),t._v("： 添加文件到暂存区，可反复使用。"),e("code",[t._v(".")]),t._v("代表当前路径下所有文件")]),t._v(" "),e("li",[e("code",[t._v("$ git rm <file>")]),t._v(":  删除工作区的某一个文件，并将其放入暂存区")]),t._v(" "),e("li",[e("code",[t._v("$ git commit [file1] [file2] -m <message>")]),t._v("：提交暂存区的文件到仓库区")]),t._v(" "),e("li",[e("code",[t._v("$ git status")]),t._v("：查看当前仓库状态")]),t._v(" "),e("li",[e("code",[t._v("$ git diff <file>")]),t._v("：查看文件异同，如："),e("code",[t._v("git diff HEAD -- readme.txt")])]),t._v(" "),e("li",[e("code",[t._v("$ git log")]),t._v("：查看最近到最远的提交日志。可选简化的参数："),e("code",[t._v("--pretty=oneline")])]),t._v(" "),e("li",[e("code",[t._v("$ git remote -v")]),t._v(" ：详细远程库的信息")]),t._v(" "),e("li",[e("code",[t._v("$ git commit --amend")]),t._v(": 修改上次的提交内容，一般指注释（修改没有 push 之前的提交）")]),t._v(" "),e("li",[e("code",[t._v("$ git commit --amend --no-edit")]),t._v("： 追加新的内容到上次没有 push 的提交")])]),t._v(" "),e("h3",{attrs:{id:"git其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git其他"}},[t._v("#")]),t._v(" git其他")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("–hard    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#删除工作空间改动代码，撤销commit，撤销git add .")]),t._v("\n–soft    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#不删除工作空间改动代码，撤销commit，不撤销git add .（推荐这种方式）")]),t._v("\n–mixed   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#不删除工作空间改动代码，撤销commit，并且撤销git add . 操作")]),t._v("\n")])])]),e("div",{staticClass:"language-SHELL extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#只修改 commit 后的注释")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend --no-edit  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#多次commit，再次追加新文件")]),t._v("\n")])])]),e("h4",{attrs:{id:"版本回退"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("$ git log")]),t._v("： 查看历史记录，查看commitId。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("$ git reset --hard HEAD^")]),t._v("：回退到上一个版本\n"),e("code",[t._v("HEAD")]),t._v("表示当前版本,上一个版本就是"),e("code",[t._v("HEAD^")]),t._v("，上上一个版本就是"),e("code",[t._v("HEAD^^")]),t._v("，当然往上100个版本太多，所以写成"),e("code",[t._v("HEAD~100")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("$ git reset --hard 1094a")]),t._v("：回退到指定版本，版本号为1094a...")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("$ git reflog")]),t._v("：查看命令历史，以便确定要回到未来的哪个版本。")])])]),t._v(" "),e("h4",{attrs:{id:"文件回退"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件回退"}},[t._v("#")]),t._v(" 文件回退")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$ git checkout [file]")]),t._v("：恢复暂存区的指定文件到工作区，"),e("code",[t._v(".")]),t._v("表示所有文件")]),t._v(" "),e("li",[e("code",[t._v("$ git reset --hard [commit]")]),t._v(":  重置暂存区与工作区，与上一次commit保持一致")]),t._v(" "),e("li",[e("code",[t._v("$ git reset [file]")]),t._v(": 重置暂存区的指定文件，但工作区不变")]),t._v(" "),e("li",[e("code",[t._v("$ git reset [commit]")]),t._v(":  重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变")]),t._v(" "),e("li",[e("code",[t._v("$ git revert [commit]")]),t._v(":  新建一个commit，用来撤销指定commit，实质是覆盖一个commit，需填写提交信息")])]),t._v(" "),e("h4",{attrs:{id:"库操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#库操作"}},[t._v("#")]),t._v(" 库操作")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$ git remote add origin git@server-name:path/repo-name.git")]),t._v("：关联一个远程库，库的别名为origin")]),t._v(" "),e("li",[e("code",[t._v("$ git push -u origin branch-name")]),t._v("：推送代码到库中的master分支（第一次），以后使用"),e("code",[t._v("$ git push origin branch-name")])]),t._v(" "),e("li",[e("code",[t._v("$ git clone origin")]),t._v("：克隆仓库到本地")])]),t._v(" "),e("h4",{attrs:{id:"分支操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$ git branch")]),t._v("：查看所有本地分支，当前分支前面会标一个"),e("code",[t._v("*")]),t._v("号")]),t._v(" "),e("li",[e("code",[t._v("$ git branch -r")]),t._v("：查看所有远程分支")]),t._v(" "),e("li",[e("code",[t._v("$ git branch -a")]),t._v("：查看所有本地分支和远程分支")]),t._v(" "),e("li",[e("code",[t._v("$ git checkout -b <name>")]),t._v("：创建并切换分支到name分支")]),t._v(" "),e("li",[e("code",[t._v("$ git branch --track [branch] [remote-branch]")]),t._v(":  新建一个分支，与指定的远程分支建立追踪关系")]),t._v(" "),e("li",[e("code",[t._v("$ git branch <name>")]),t._v("：创建name分支")]),t._v(" "),e("li",[e("code",[t._v("$ git checkout <name>")]),t._v("：切换分支")]),t._v(" "),e("li",[e("code",[t._v("$ git merge <name>")]),t._v("：合并某分支name到当前分支")]),t._v(" "),e("li",[e("code",[t._v("$ git branch -d <name>")]),t._v("：删除指定分支（已合并的分支）")]),t._v(" "),e("li",[e("code",[t._v("$ git branch -D <name>")]),t._v("：强行删除没有被合并的分支")])]),t._v(" "),e("blockquote",[e("p",[t._v("分支操作容易造成合并冲突，需手动解决冲突后，在提交\nGit默认采用Fast forward模式，如果不想使用，用命令"),e("code",[t._v('$ git merge --no-ff -m "merge with no-ff" dev')]),t._v(",请注意"),e("code",[t._v("--no-ff")]),t._v("参数，表示禁用Fast forward，采用普通模式合并，合并后的有分支历史可查。")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$ git checkout -b branch-name origin/branch-name")]),t._v("：在本地创建和远程分支对应的分支")]),t._v(" "),e("li",[e("code",[t._v("$ git log --graph")]),t._v("：查看分支合并图")])]),t._v(" "),e("blockquote",[e("p",[t._v("在可视化窗口下操作，如果当前分支只是创建，没有东西commit则无法查看到分支信息。")])]),t._v(" "),e("h4",{attrs:{id:"工作现场保存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作现场保存"}},[t._v("#")]),t._v(" 工作现场保存")]),t._v(" "),e("p",[t._v("场景：当前正在编写一个功能，突然有紧急的BUG要修复，但是当前功能还没有完成，不能提交，只能稍后再回来操作，需要暂存。执行之前一定要先执行"),e("code",[t._v("git add")]),t._v("。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$ git stash")]),t._v("：保存工作现场")]),t._v(" "),e("li",[e("code",[t._v("$ git stash list")]),t._v("：查看所有工作现场")]),t._v(" "),e("li",[e("code",[t._v("$ git stash apply")]),t._v("：恢复工作现场。恢复完成后，就要将原现场删除")]),t._v(" "),e("li",[e("code",[t._v("$ git stash drop")]),t._v("：删除工作现场")]),t._v(" "),e("li",[e("code",[t._v("$ git stash pop")]),t._v("：恢复的同时并删除工作现场")])]),t._v(" "),e("h4",{attrs:{id:"多人协作工作模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多人协作工作模式"}},[t._v("#")]),t._v(" 多人协作工作模式")]),t._v(" "),e("p",[t._v("1、首先，可以试图用"),e("code",[t._v("$ git push origin <branch-name>")]),t._v("推送自己的修改；")]),t._v(" "),e("p",[t._v("2、如果推送失败，则因为远程分支比你的本地版本新，需要先用"),e("code",[t._v("$ git pull")]),t._v("试图合并；")]),t._v(" "),e("p",[t._v("3、如果合并有冲突，则解决冲突，并在本地提交；")]),t._v(" "),e("p",[t._v("4、没有冲突或者解决掉冲突后，再用"),e("code",[t._v("$ git push origin <branch-name>")]),t._v("推送就能成功！")]),t._v(" "),e("p",[t._v("5、如果"),e("code",[t._v("$ git pull")]),t._v("提示"),e("code",[t._v("no tracking information")]),t._v("，则说明本地分支和远程分支的链接关系没有创建，用命令"),e("code",[t._v("$ git branch --set-upstream-to <branch-name> origin/<branch-name>")]),t._v("。")]),t._v(" "),e("p",[t._v("6、（不常用命令"),e("code",[t._v("git rebase")]),t._v(" ，适用于：1、当我们在一个过时的分支上面开发的时候，执行 rebase 以此同步 master 分支最新变动；2、假如我们要启动一个放置了很久的并行工作，现在有时间来继续这件事情，很显然这个分支已经落后了。这时候需要在最新的基准上面开始工作，所以 rebase 是最合适的选择。相关操作："),e("code",[t._v("git rebase --continue")]),t._v("、"),e("code",[t._v("git rebase —abort")]),t._v("）")]),t._v(" "),e("h4",{attrs:{id:"git标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git标签"}},[t._v("#")]),t._v(" git标签")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git tag <tagname> <branch-name>")]),t._v("：切换到某一分支，新建一个标签，默认为HEAD，也可以指定一个commit id")]),t._v(" "),e("li",[e("code",[t._v('git tag -a <tagname> -m "blablabla..."')]),t._v("：可以指定标签信息")]),t._v(" "),e("li",[e("code",[t._v("git tag")]),t._v("：查看所有标签")]),t._v(" "),e("li",[e("code",[t._v("git show <tagname>")]),t._v("：查看标签信息")]),t._v(" "),e("li",[e("code",[t._v("git tag -d <tagname>")]),t._v("：删除标签")]),t._v(" "),e("li",[e("code",[t._v("git push origin <tagname>")]),t._v("：推送一个本地标签到远程")]),t._v(" "),e("li",[e("code",[t._v("git push origin --tags")]),t._v("：推送全部未推送过的本地标签")]),t._v(" "),e("li",[e("code",[t._v("git push origin :refs/tags/<tagname>")]),t._v("：删除一个远程标签")])]),t._v(" "),e("h4",{attrs:{id:"自定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义"}},[t._v("#")]),t._v(" 自定义")]),t._v(" "),e("p",[t._v("最常见的设置：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git config --global user.name gqsu")])]),t._v(" "),e("li",[e("code",[t._v("git config --global user.email 597009281@qq.com")])])]),t._v(" "),e("h4",{attrs:{id:"客户端的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#客户端的使用"}},[t._v("#")]),t._v(" 客户端的使用")]),t._v(" "),e("p",[t._v("推荐使用sourceTree可视化工具来完成git的相关操作，很方便")])])}),[],!1,null,null,null);v.default=i.exports}}]);