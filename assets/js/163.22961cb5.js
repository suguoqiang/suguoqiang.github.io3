(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{658:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"java基本类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java基本类型"}},[t._v("#")]),t._v(" java基本类型")]),t._v(" "),a("p",[t._v("八大基本类型：字符类型 char、布尔类型 boolean、整数类型 byte、short、int、long、\n浮点数类型 float、double。")]),t._v(" "),a("h3",{attrs:{id:"线程的两种实现方式和区别-准确来说是三种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的两种实现方式和区别-准确来说是三种"}},[t._v("#")]),t._v(" 线程的两种实现方式和区别（准确来说是三种）")]),t._v(" "),a("p",[t._v("有两种实现方法，分别是继承 Thread 类（子类重写run方法，调用子类的的start实现）与实现 Runnable 接口（覆写run方法，利用 Thread 类包装 Runnable 实例，调用start实现）。 实现Runnable 接口除了拥有和继承 Thread类一样的功能以外，实现 Runnable 接口还具有以下功能。")]),t._v(" "),a("ul",[a("li",[t._v("适合多个相同程序代码的线程去处理同一资源的情况，可以把线程同程序中的数据有效的分离， 较好地体现了面向对象的设计思想。")]),t._v(" "),a("li",[t._v("可以避免由于 Java 的单继承特性带来的局限。例如，class Student 已经继承了 class Person，如 果要把 Student 类放入多线程中去，那么就不能使用继承 Thread 类的方式。\n因为在 Java 中规定 了一个类只能有一个父类，不能同时有两个父类。所以就只能使用实现 Runnable 接口的方式了。")]),t._v(" "),a("li",[t._v("增强了代码的健壮性，代码能够被多个线程共同访问，代码与数据是独立的。多个线程可以操 作相同的数据，与它们的代码无关。\n当线程被构造时，需要的代码和数据通过一个对象作为构 造函数实参传递进去，这个对象就是一个实现了 Runnable 接口的类的实例")])]),t._v(" "),a("blockquote",[a("p",[t._v("第三种:通过Callable和Future创建线程。（实现Callable接口，覆写call方法，利用FutureTask类来包装Callable对象，再利用Thread类来包装FutureTask实例来启动）")])]),t._v(" "),a("h3",{attrs:{id:"线程同步的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程同步的方法"}},[t._v("#")]),t._v(" 线程同步的方法")]),t._v(" "),a("p",[t._v("同步是一种各线程间协调使用共享资源的一种方式。各线程间的相互通信是实现同步的重要因素， 所以 Java 提供了 wait()和 notify()等方法来使线程之间可以相互通信。")]),t._v(" "),a("ul",[a("li",[t._v("wait()：使线程处于等待状态，并且释放所持有的对象的 lock。可以与 notify()方法配套使用。 它有两种形式，一种是以毫秒为单位的一段时间作为参数，另一种是没有参数。")]),t._v(" "),a("li",[t._v("sleep()：使一个正在运行的线程处于阻塞状态，可以以毫秒为单位的一段时间作为参数，它可 以使得线程在设定的时间停止运行，但是在设定的时间一过，线程重新进入可执行状态。由于 sleep()是一个静态方法，所以调用此方法要捕捉 InterruptedException 异常。")]),t._v(" "),a("li",[t._v("notify()：唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某 一个等待状态的线程，而是由 JVM 确定唤醒哪个线程，而且不是按优先级。")]),t._v(" "),a("li",[t._v("allnotity()：唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让 它们竞争。只有获得锁的那一个线程才能进入可执行状态。")])]),t._v(" "),a("blockquote",[a("p",[t._v("sleep 是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监 控状态依然保持，到时后会自动恢复。调用 sleep 不会释放对象锁。"),a("br"),t._v("\nwait 是 Object 类的方法，对此对象调用 wait 方法导致本线程放弃对象锁，进入等待此对象的等待 锁定池。只有针对此对象发出 notify 方法（或 notifyAll）后，本线程才进入对象锁定池准备获得对象锁 进入运行状态。")])]),t._v(" "),a("h3",{attrs:{id:"spring的核心主要有三点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring的核心主要有三点"}},[t._v("#")]),t._v(" Spring的核心主要有三点：")]),t._v(" "),a("p",[t._v("IoC：反转控制。\n　　反转控制就是指将控制权由类内部抽离到容器，由容器类的实例化及动作进行配置管理。")]),t._v(" "),a("p",[t._v("Dependency-injection：依赖注入\n　　对象的依赖关系由负责协调系统中各个对象的第三方组件在创建对象时设定。对象不自行创建或管理它们的依赖关系，依赖关系被自动注入到需要它们的对象中。通过参数和配置能够体会出“注入”这个词在这里有多形象。依赖注入的最大好处就是松耦合。不需要再类内部去和特定的类进行绑定，而是将一些依赖关系以参数的形式注入到类内部。")]),t._v(" "),a("p",[t._v("Aspect Oriented Programming：面向切向编程\n　　在软件开发中，分布于应用中多处的功能被称为横切关注点。这些横切关注点往往和业务逻辑是相分离的，将这些横切关注点与业务逻辑相分离正式AOP要解决的。AOP编程能够让遍布在应用各处的功能分离出来形成可重用的组件。是高内聚低耦合的又一个体现，将通用实现模块与核心业务模块相分离。")]),t._v(" "),a("h3",{attrs:{id:"integer类型的数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#integer类型的数值"}},[t._v("#")]),t._v(" Integer类型的数值")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" f1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f3"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f4"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("f2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f3"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("f4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果整型字面量的值在-128 到 127 之间，那么不会 new 新的 Integer 对象，而是直接引用常量池\n中的 Integer 对象，所以上面的面试题中 f1==f2 的结果是 true，而 f3==f4 的结果是 false。")]),t._v(" "),a("h3",{attrs:{id:"list-map-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-map-set"}},[t._v("#")]),t._v(" List,Map,Set")]),t._v(" "),a("p",[t._v("List接口有三个实现类（LinkedList：基于链表实现，链表内存是散乱的，每一个元素存储本身内存地址的同时还\n存储下一个元素的地址。链表增删快，查找慢；ArrayList：基于数组实现，非线程安全的，效率高，便于索引，但不\n便于插入删除；Vector：基于数组实现，线程安全的，效率低）。")]),t._v(" "),a("p",[t._v("Map 接口有三个实现类（HashMap：基于 hash 表的 Map 接口实现，非线程安全，高效，支持 null 值和 null\n键；HashTable：线程安全，低效，不支持null值和null键；LinkedHashMap：是 HashMap的一个子类，保存了\n记录的插入顺序；SortMap接口：TreeMap，能够把它保存的记录根据键排序，默认是键值的升序排序）。")]),t._v(" "),a("p",[t._v("Set 接口有两个实现类（HashSet：底层是由 HashMap 实现，不允许集合中有重复的值，使用该方式时需要重\n写 equals()和 hashCode()方法；LinkedHashSet：继承与 HashSet，同时又基于 LinkedHashMap 来进行实现，底\n层使用的是LinkedHashMp）")]),t._v(" "),a("h3",{attrs:{id:"aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[t._v("#")]),t._v(" AOP")]),t._v(" "),a("p",[t._v("AOP是一种编程范式，提供从另一个角度来考虑程序结构以完善面向对象编程（OOP）。\nAOP为开发者提供了一种描述横切关注点的机制，并能够自动将横切关注点织入到面向对象的软件系统中，从而实现了横切关注点的模块化。\nAOP能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任，例如事务处理、日志管理、权限控制等，封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。")]),t._v(" "),a("h3",{attrs:{id:"concurrenthashmap-处理并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-处理并发"}},[t._v("#")]),t._v(" ConcurrentHashMap 处理并发")]),t._v(" "),a("p",[t._v("HashMap,Hashtable与ConcurrentHashMap都是实现的哈希表数据结构，在随机读取的时候效率很高。Hashtable实现同步是利用synchronized关键字进行锁定的，其是针对整张哈希表进行锁定的，即每次锁住整张表让线程独占，在线程安全的背后是巨大的浪费。ConcurrentHashMap和Hashtable主要区别就是围绕着 "),a("strong",[t._v("锁的粒度")]),t._v(" 进行区别以及如何区锁定。")]),t._v(" "),a("p",[t._v("ConcurrentHashMap  1.7和1.8版本的是有区别的，主要体现在：存放数据的 HashEntry 改为 Node，但作用都是相同的；分段锁技术换成了 CAS + synchronized 来保证并发安全性。")]),t._v(" "),a("p",[t._v("先说说HashMap。HashMap底层是基于 数组和链表 进行实现的。具体的可查看源码")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DEFAULT_INITIAL_CAPACITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DEFAULT_LOAD_FACTOR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialCapacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Illegal initial capacity: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialCapacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" MAXIMUM_CAPACITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       initialCapacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MAXIMUM_CAPACITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loadFactor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Illegal load factor: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loadFactor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    threshold "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，\n当数量达到了 16 * 0.75 = 12 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。\n因此通常建议能提前预估 HashMap 的大小最好，尽量的减少扩容带来的性能损耗。")]),t._v(" "),a("blockquote",[a("p",[t._v("个人理解：HashMap是有数组（也有叫做桶）和链表进行实现的，其中的链表在HashMap定义为Entry，它有三个属性，key，value和next。\n当对一个元素进行存操作的时候，首先会利用hash算法对key进行运算求出，要存入数组中的index位置，如果当前位置没有其他元素则直接将该元素放入该位置。\n如果当前位置有值，则将该位置元素置为该元素，并将next节点指向原来的元素，所以数组中永远存放的是最后插入的元素。（这就很好的解决了hash冲突的问题，可以存放多个元素）\n当对一个key进行取操作的时候，首先会根据key计算出其对应的index（HashMap中同一个key的index位置永远是固定的，即使按2的幂次即扩容），\n然后在根据equals()方法找到对应的Entry，这也很好的解释了“为什么覆写equals()方法一定要覆写HashCode()方法”，因为hashcode相同，equals不一定相同；equals相同，hashcode必同。")]),t._v(" "),a("p",[t._v("HashMap 只能在单线程中使用，并且尽量的预设容量，尽可能的减少扩容。在 "),a("code",[t._v("JDK1.8")]),t._v(" 中对 "),a("code",[t._v("HashMap")]),t._v(" 进行了优化（修复死循环问题）： 当 "),a("code",[t._v("hash")]),t._v(" 碰撞之后写入链表的长度超过了阈值(默认为8)，链表将会转换为"),a("strong",[t._v("红黑树")]),t._v("。")])]),t._v(" "),a("p",[t._v("参考：https://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/")]),t._v(" "),a("p",[t._v("https://www.cnblogs.com/LiaHon/p/11149644.html")]),t._v(" "),a("p",[a("strong",[t._v("总结")]),t._v("：HashMap 基于 hashing 原理，我们通过 put ()和 get ()方法储存和获取对象。当我们将键值对传递给 put ()方法时，它调用键对象的 hashCode ()方法来计算 hashcode，让后找到 bucket 位置来储存值对象。当获取对象时，通过键对象的 equals ()方法找到正确的键值对，然后返回值对象。HashMap 使用 LinkedList 来解决碰撞问题，当发生碰撞了，对象将会储存在 LinkedList 的下一个节点中。 HashMap 在每个 LinkedList 节点中储存键值对对象。")]),t._v(" "),a("p",[a("strong",[t._v("其他")]),t._v("：")]),t._v(" "),a("blockquote",[a("p",[t._v("put方法的核心为hash()，putVal()，resize()，get方法的核心为getNode()")])]),t._v(" "),a("p",[t._v("1、hash运算：通过hash方法计算索引，得到数组中保存的位置")]),t._v(" "),a("div",{staticClass:"language-JAVA extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("HashMap中的hash算法是通过key的hashcode值与其hashcode右移16位后得到的值进行异或运算得到的，混合了高位和低位得出的最终hash值，避免不同的key得到了同样的hash值冲突的概率就小多了。")])]),t._v(" "),a("p",[t._v("2、putVal方法：\n"),a("img",{attrs:{src:"http://cdn.gqsu.top/hashMap01.png",alt:""}})]),t._v(" "),a("p",[t._v("3、resize()")]),t._v(" "),a("p",[t._v("4、getNode()")]),t._v(" "),a("p",[t._v("HashMap的遍历方式：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("### 方式"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("（推荐）\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" entryIterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entryIterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" entryIterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" value="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n### 方式"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("（不推荐，效率低，先取key在取value）\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" iterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keySet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" value="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("ConcurrentHashMap 采用了分段锁技术，其中 Segment 继承于 ReentrantLock。\n不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理，\n理论上 ConcurrentHashMap 支持 CurrencyLevel (Segment 数组数量)的线程并发。\n每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment，在整个过程都不需要加锁。")]),t._v(" "),a("blockquote",[a("p",[t._v("其他并发类："),a("code",[t._v("ConcurrentLinkedQueue")]),t._v(","),a("code",[t._v("CopyOnWriteArrayList")]),t._v(","),a("code",[t._v("CopyOnWriteArraySet")]),t._v(","),a("code",[t._v("LinkedBlockingQueue")]),t._v(","),a("code",[t._v("ArrayBlockingQueue")]),t._v(","),a("code",[t._v("LinkedBlockingQueue")]),t._v(","),a("code",[t._v("DelayQueue")]),t._v(","),a("code",[t._v("LinkedTransferQueue")]),t._v(","),a("code",[t._v("SynchronousQueue")])])]),t._v(" "),a("h3",{attrs:{id:"java-中的设计模式-回收机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-中的设计模式-回收机制"}},[t._v("#")]),t._v(" Java 中的设计模式&回收机制")]),t._v(" "),a("p",[t._v("总体来说设计模式分为三大类：")]),t._v(" "),a("p",[t._v("创建型模式，共五种：工厂方法模式（普通(类似于定义的接口)，多个，静态）、抽象工厂模式、单例模式（饿汉和懒汉）、建造者模式、原型模式。")]),t._v(" "),a("p",[t._v("结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。")]),t._v(" "),a("p",[t._v("行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模\n式、状态模式、访问者模式、中介者模式、解释器模式。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("单例模式：懒汉式、饿汉式、双重校验锁、静态加载，内部类加载、枚举类加载。保证一个类仅有一个实例，并提供一个访问它的全局访问点。")])]),t._v(" "),a("li",[a("p",[t._v("代理模式：动态代理和静态代理，什么时候使用动态代理。")])]),t._v(" "),a("li",[a("p",[t._v("适配器模式：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。")])]),t._v(" "),a("li",[a("p",[t._v("装饰者模式：动态给类加功能。")])]),t._v(" "),a("li",[a("p",[t._v("观察者模式：有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。")])]),t._v(" "),a("li",[a("p",[t._v("策略模式：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。")])]),t._v(" "),a("li",[a("p",[t._v("外观模式：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。")])]),t._v(" "),a("li",[a("p",[t._v("命令模式：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。")])]),t._v(" "),a("li",[a("p",[t._v("创建者模式：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。")])]),t._v(" "),a("li",[a("p",[t._v("抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。")])])]),t._v(" "),a("h3",{attrs:{id:"单例设计模式之饿汉式与懒汉式-singleton"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例设计模式之饿汉式与懒汉式-singleton"}},[t._v("#")]),t._v(" 单例设计模式之饿汉式与懒汉式（Singleton）")]),t._v(" "),a("p",[t._v("设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。")]),t._v(" "),a("p",[t._v("目的是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。")]),t._v(" "),a("p",[t._v("单例(Singleton)设计模式是Java中常用的设计模式之一。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样设计有如下好处：")]),t._v(" "),a("ul",[a("li",[t._v("有些类创建比较复杂，这样可以节省系统开销。")]),t._v(" "),a("li",[t._v("省去了new运算符，降低了系统内容的使用频率，减轻了GC的压力。")]),t._v(" "),a("li",[t._v("有些类只需要使用一个，这样就可以使用单例了。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 单例设计模式，饿汉式(一上来就new对象)\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.私有化构造方法，不允许外边直接创建对象")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2.声明唯一的实例,使用 private static 修饰")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3.提供一个用于获取实例的方法，使用 public static 修饰")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 单例设计模式，懒汉式(用到的时候才new对象)\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.私有化构造方法，不允许外边直接创建对象")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2.声明唯一的实例,使用 private static 修饰")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton2")]),t._v(" instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3.提供一个用于获取实例的方法，使用 public static 修饰")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\tinstance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("懒汉模式的特点是加载类时比较慢，但运行时获取对象的速度比较快，线程安全。\n饿汉模式的特点是加载类时比较快，但运行时获取对象的速度比较慢，线程不安全。")])]),t._v(" "),a("h3",{attrs:{id:"cookie和session的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie和session的区别"}},[t._v("#")]),t._v(" cookie和session的区别")]),t._v(" "),a("p",[t._v("1、cookie数据存放在客户的浏览器上，session数据放在服务器上。")]),t._v(" "),a("p",[t._v("2、cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。")]),t._v(" "),a("p",[t._v("3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。")]),t._v(" "),a("p",[t._v("4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。")]),t._v(" "),a("p",[t._v("5、可以考虑将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。")]),t._v(" "),a("h3",{attrs:{id:"索引的作用及索引的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的作用及索引的数据结构"}},[t._v("#")]),t._v(" 索引的作用及索引的数据结构")]),t._v(" "),a("p",[t._v("mysql索引的用途：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("保持数据的完整性；")])]),t._v(" "),a("li",[a("p",[t._v("优化数据的访问性能")])]),t._v(" "),a("li",[a("p",[t._v("改进表的链接（join）操作")])]),t._v(" "),a("li",[a("p",[t._v("对结果进行排序")])]),t._v(" "),a("li",[a("p",[t._v("简化聚合数据操作")])])]),t._v(" "),a("p",[t._v("索引的数据结构：B-、B+、R-、散列")]),t._v(" "),a("h3",{attrs:{id:"索引的实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的实现方式"}},[t._v("#")]),t._v(" 索引的实现方式")]),t._v(" "),a("p",[t._v("1、B+树")]),t._v(" "),a("p",[t._v("2、散列索引")]),t._v(" "),a("p",[t._v("3、位图索引")]),t._v(" "),a("h3",{attrs:{id:"对象锁和类锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象锁和类锁"}},[t._v("#")]),t._v(" 对象锁和类锁")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("synchronized 加到 static 方法前面是给class 加锁，即类锁；而synchronized 加到非静态方法前面是给对象上锁。")])]),t._v(" "),a("li",[a("p",[t._v("如果多线程同时访问同一类的 类锁（synchronized 修饰的静态方法）以及对象锁（synchronized 修饰的非静态方法）这两个方法执行是异步的，原因：类锁和对象锁是2中不同的锁。")])]),t._v(" "),a("li",[a("p",[t._v("类锁对该类的所有对象都能起作用，而对象锁不能")])])]),t._v(" "),a("h3",{attrs:{id:"什么是控制反转-ioc-什么是依赖注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是控制反转-ioc-什么是依赖注入"}},[t._v("#")]),t._v(" 什么是控制反转(IOC)?什么是依赖注入?")]),t._v(" "),a("p",[t._v("控制反转是应用于软件工程领域中的，在运行时被装配器对象来绑定耦合对象的一种编程技巧，对象之间耦合关系在编译时通常是未知的。在传统的编程方式中，业务逻辑的流程是由应用程序中的早已被设定好关联关系的对象来决定的。在使用控制反转的情况下，业务逻辑的流程是由对象关系图来决定的，该对象关系图由装配器负责实例化，这种实现方式还可以将对象之间的关联关系的定义抽象化。而绑定的过程是通过”依赖注入”实现的。")]),t._v(" "),a("p",[t._v("控制反转是一种以给予应用程序中目标组件更多控制为目的设计范式，并在我们的实际工作中起到了有效的作用。")]),t._v(" "),a("p",[t._v("依赖注入是在编译阶段尚未知所需的功能是来自哪个的类的情况下，将其他对象所依赖的功能对象实例化的模式。这就需要一种机制用来激活相应的组件以提供特定的功能，所以依赖注入是控制反转的基础。否则如果在组件不受框架控制的情况下，框架又怎么知道要创建哪个组件？")]),t._v(" "),a("p",[t._v("在Java中依然注入有以下三种实现方式：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("构造器注入")])]),t._v(" "),a("li",[a("p",[t._v("Setter方法注入")])]),t._v(" "),a("li",[a("p",[t._v("接口注入")])])]),t._v(" "),a("h3",{attrs:{id:"五种经典的i-o模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五种经典的i-o模型"}},[t._v("#")]),t._v(" 五种经典的I/O模型")]),t._v(" "),a("ol",[a("li",[t._v("Blocking I/O（阻塞I/O）：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在Java中使用同步阻塞I/O实现文件的读取")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),t._v(" fis "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PRO_FILE_PATH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Properties")]),t._v(" pro "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" pro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keySet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("Nonblocking I/O（非阻塞I/O）")])]),t._v(" "),a("li",[a("p",[t._v("I/O Multiplexing（I/O多路复用）")])]),t._v(" "),a("li",[a("p",[t._v("Signal-Driven I/O（信号驱动I/O）")])]),t._v(" "),a("li",[a("p",[t._v("Asynchronous I/O （异步I/O）")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//node环境下异步读取一个文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/Users/lk/Desktop/pro.properties'")]),t._v("\nfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[t._v("#")]),t._v(" cookie")]),t._v(" "),a("p",[t._v("cookie是保存在本地终端的数据。cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，\n下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，\n同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。")]),t._v(" "),a("h3",{attrs:{id:"token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[t._v("#")]),t._v(" token")]),t._v(" "),a("p",[t._v("token的意思是“令牌”，是用户身份的验证方式，最简单的token组成:uid(用户唯一的身份标识)、time(当前时间的时间戳)、\nsign(签名，由token的前几位+盐以哈希算法压缩成一定长的十六进制字符串，可以防止恶意第三方拼接token请求服务器)\n还可以把不变的参数也放进token，避免多次查库")]),t._v(" "),a("p",[t._v("token选值：")]),t._v(" "),a("ol",[a("li",[t._v("用设备号/设备mac地址作为Token（推荐）")])]),t._v(" "),a("p",[t._v("客户端：客户端在登录的时候获取设备的设备号/mac地址，并将其作为参数传递到服务端。")]),t._v(" "),a("p",[t._v("服务端：服务端接收到该参数后，便用一个变量来接收同时将其作为Token保存在数据库，并将该Token设置到session中，客户端每次请求的时候都要统一拦截，\n并将客户端传递的token和服务器端session中的token进行对比，如果相同则放行，不同则拒绝。")]),t._v(" "),a("p",[t._v("分析：此刻客户端和服务器端就统一了一个唯一的标识Token，而且保证了每一个设备拥有了一个唯一的会话。该方法的缺点是客户端需要带设备号/mac地址作为参数传递，\n而且服务器端还需要保存；优点是客户端不需重新登录，只要登录一次以后一直可以使用，至于超时的问题是有服务器这边来处理，如何处理？若服务器的Token超时后，\n服务器只需将客户端传递的Token向数据库中查询，同时并赋值给变量Token，如此，Token的超时又重新计时。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("用session值作为Token")])]),t._v(" "),a("p",[t._v("客户端：客户端只需携带用户名和密码登陆即可。")]),t._v(" "),a("p",[t._v("客户端：客户端接收到用户名和密码后并判断，如果正确了就将本地获取sessionID作为Token返回给客户端，客户端以后只需带上请求数据即可。")]),t._v(" "),a("p",[t._v("分析：这种方式使用的好处是方便，不用存储数据，但是缺点就是当session过期后，客户端必须重新登录才能进行访问数据。")]),t._v(" "),a("p",[t._v("区别：")]),t._v(" "),a("p",[t._v("1、cookie数据存放在客户的浏览器上，session数据放在服务器上。")]),t._v(" "),a("p",[t._v("2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗\n考虑到安全应当使用session。")]),t._v(" "),a("p",[t._v("3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能\n考虑到减轻服务器性能方面，应当使用COOKIE。")]),t._v(" "),a("p",[t._v("4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。")]),t._v(" "),a("p",[t._v("5、所以个人建议：\n将登陆信息等重要信息存放为SESSION\n其他信息如果需要保留，可以放在COOKIE中")]),t._v(" "),a("h4",{attrs:{id:"基于jwt的token认证机制实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于jwt的token认证机制实现"}},[t._v("#")]),t._v(" 基于JWT的Token认证机制实现")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("组成：一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。")])]),t._v(" "),a("li",[a("p",[t._v("认证过程：")])])]),t._v(" "),a("ol",[a("li",[t._v("登录\n第一次认证：\n第一次登录，用户从浏览器输入用户名/密码，提交后到服务器的登录处理的Action层（Login Action）；")])]),t._v(" "),a("p",[t._v("Login Action调用认证服务进行用户名密码认证，如果认证通过，Login Action层调用用户信息服务获取用户信息（包括完整的用户信息及对应权限信息）；\n返回用户信息后，Login Action从配置文件中获取Token签名生成的秘钥信息，进行Token的生成；")]),t._v(" "),a("p",[t._v("生成Token的过程中可以调用第三方的JWT Lib生成签名后的JWT数据；")]),t._v(" "),a("p",[t._v("完成JWT数据签名后，将其设置到COOKIE对象中，并重定向到首页，完成登录过程；")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://cdn.gqsu.top/jwt03.png",alt:""}})]),t._v(" "),a("p",[t._v("请求认证")]),t._v(" "),a("p",[t._v("基于Token的认证机制会在每一次请求中都带上完成签名的Token信息，这个Token信息可能在COOKIE\n中，也可能在HTTP的Authorization头中；")]),t._v(" "),a("p",[t._v("客户端（APP客户端或浏览器）通过GET或POST请求访问资源（页面或调用API）；")]),t._v(" "),a("p",[t._v("认证服务作为一个Middleware HOOK 对请求进行拦截，首先在cookie中查找Token信息，如果没有找到，则在HTTP Authorization Head中查找；")]),t._v(" "),a("p",[t._v("如果找到Token信息，则根据配置文件中的签名加密秘钥，调用JWT Lib对Token信息进行解密和解码；")]),t._v(" "),a("p",[t._v("完成解码并验证签名通过后，对Token中的exp、nbf、aud等信息进行验证；")]),t._v(" "),a("p",[t._v("全部通过后，根据获取的用户的角色权限信息，进行对请求的资源的权限逻辑判断；")]),t._v(" "),a("p",[t._v("如果权限逻辑判断通过则通过Response对象返回；否则则返回HTTP 401；")]),t._v(" "),a("h3",{attrs:{id:"sprint-cloud-和-sprint-boot区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sprint-cloud-和-sprint-boot区别"}},[t._v("#")]),t._v(" Sprint cloud 和 Sprint boot区别")]),t._v(" "),a("p",[t._v("Spring Boot:")]),t._v(" "),a("p",[t._v("旨在简化创建产品级的Spring应用和服务，简化了配置文件，使用嵌入式web服务器，含有诸多开箱即用微服务功能，可以和spring cloud联合部署。")]),t._v(" "),a("p",[t._v("Spring Cloud：")]),t._v(" "),a("p",[t._v("微服务工具包，为开发者提供了在分布式系统的配置管理、服务发现、断路器、智能路由、微代理、控制总线等开发工具包。")]),t._v(" "),a("p",[t._v("SpringCloud的"),a("strong",[t._v("基础功能")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("服务治理： Spring  Cloud Eureka")]),t._v(" "),a("li",[t._v("客户端负载均衡： Spring Cloud Ribbon")]),t._v(" "),a("li",[t._v("服务容错保护： Spring  Cloud Hystrix")]),t._v(" "),a("li",[t._v("声明式服务调用： Spring  Cloud Feign")]),t._v(" "),a("li",[t._v("API网关服务：Spring Cloud Zuul")]),t._v(" "),a("li",[t._v("分布式配置中心： Spring Cloud Config")])]),t._v(" "),a("p",[t._v("SpringCloud的高级功能：")]),t._v(" "),a("ul",[a("li",[t._v("消息总线： Spring  Cloud Bus")]),t._v(" "),a("li",[t._v("消息驱动的微服务： Spring Cloud Stream")]),t._v(" "),a("li",[t._v("分布式服务跟踪： Spring  Cloud Sleuth")])]),t._v(" "),a("h3",{attrs:{id:"设计模式6大原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式6大原则"}},[t._v("#")]),t._v(" 设计模式6大原则")]),t._v(" "),a("ol",[a("li",[t._v("单一职责原则(SRP) ：就一个类而言，应该仅有一个引起它变化的原因。")]),t._v(" "),a("li",[t._v("开放封闭原则(ASD) ：类、模块、函数等等等应该是可以拓展的，但是不可修改。")]),t._v(" "),a("li",[t._v("里氏替换原则(LSP) ：所有引用基类（父类）的地方必须能透明地使用其子类的对象 。")]),t._v(" "),a("li",[t._v("依赖倒置原则(DIP) ：高层模块不应该依赖低层模块，两个都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。")]),t._v(" "),a("li",[t._v("迪米特原则(LOD) ：一个软件实体应当尽可能少地与其他实体发生相互作用。")]),t._v(" "),a("li",[t._v("接口隔离原则(ISP) ：一个类对另一个类的依赖应该建立在最小的接口上。")])]),t._v(" "),a("h3",{attrs:{id:"stringbuilder-与-stringbuffer-的区别以及stringbuilder-与-string-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder-与-stringbuffer-的区别以及stringbuilder-与-string-的区别"}},[t._v("#")]),t._v(" StringBuilder 与 StringBuffer 的区别以及StringBuilder 与 String 的区别")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("StringBuilder效率高速度快，线程不安全，StringBuffer效率低速度慢，线程安全。")])]),t._v(" "),a("li",[a("p",[t._v("String是不可变字符串，StringBuilder是可变字符串。为什么有这样的差异，可以深入源码去解析，比如String类内的 priver final  char  value[] 等方法的原因。")])]),t._v(" "),a("li",[a("p",[t._v("如果是简单的声明一个字符串没有后续过多的操作，使用 String，StringBuilder 均可，若后续对字符穿做频繁的添加，删除操作，或者是在循环当中动态的改变字符串的长度应该用 StringBuilder。使用 String 会产生多余的字符串，占用内存空间。")])])]),t._v(" "),a("h3",{attrs:{id:"读写锁与独占锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读写锁与独占锁"}},[t._v("#")]),t._v(" 读写锁与独占锁")]),t._v(" "),a("p",[t._v("与传统锁不同的是读写锁的规则是可以共享读，但只能一个写，总结起来为：读读不互斥，读写互斥，写写互斥，而一般的独占锁是：读读互斥，读写互斥，写写互斥，而场景中往往读远远大于写，读写锁就是为了这种优化而创建出来的一种机制。")]),t._v(" "),a("p",[t._v("注意是"),a("em",[t._v("读远远大于写")]),t._v("，一般情况下独占锁的效率低来源于高并发下对临界区的激烈竞争导致线程上下文切换。因此当并发不是很高的情况下，读写锁由于需要额外维护读锁的状态，可能还不如独占锁的效率高。因此需要根据实际情况选择使用。")]),t._v(" "),a("p",[a("code",[t._v("ReentrantReadWriteLock")]),t._v(" ---读写锁。当写线程访问时则其他所有锁都将阻塞，读线程访问时则不会。通过读写锁的分离可以很大程度的提高并发量和吞吐量。")]),t._v(" "),a("p",[a("code",[t._v("ReentrantLock")]),t._v(" ---可重入锁。使用 "),a("code",[t._v("ReentrantLock")]),t._v(" 获取锁的时候会判断当前线程是否为获取锁的线程，如果是则将同步的状态 +1 ,释放锁的时候则将状态 -1。只有将同步状态的次数置为 0 的时候才会最终释放锁。ReentrantLock 还可以分为公平锁(顺序式)和非公平锁(抢占式)，默认是非公平锁。")]),t._v(" "),a("p",[t._v("顾名思义，"),a("code",[t._v("ReentrantReadWriteLock")]),t._v("名为“可重入读写锁”，它维护两个锁：读锁和写锁。在没有写锁的情况下，读锁允许多个线程同时访问，而写锁是独占的，")]),t._v(" "),a("p",[a("code",[t._v("ReentrantReadWriteLock")]),t._v("主要特性有以下几个：")]),t._v(" "),a("ul",[a("li",[t._v("公平性。支持公平锁和非公平锁，默认是非公平锁。非公平锁比公平锁有更高的吞吐量。")]),t._v(" "),a("li",[t._v("可重入。允许读锁可写锁可重入。写锁可以获得读锁，读锁不能获得写锁。读写锁最多支持65535个递归写入锁和65535个递归读取锁(这里有个需要注意的地方，ReentrantLock的可重入次数为2^32-1，而ReentrantReadWriteLock可重入次数为2^16-1=65535，为啥呢？这是因为ReentrantReadWriteLock将AQS中的state域分成了两部分，读锁和写锁各占16位，具体可以往下看)。")]),t._v(" "),a("li",[t._v("锁降级。在获得写锁的情况下再获得读锁(这和写锁是独占的并不冲突，这里是指一个线程可以活得写锁再获得读锁，独占是指多个线程之间)，然后释放写锁称为锁降级，反之称为锁升级。允许写锁降低为读锁，反之不允许。")])]),t._v(" "),a("p",[t._v("ReentrantReadWriteLock可以用来提高某些集合的并发性能。当集合比较大，并且读比写频繁时，可以使用该类。")])])}),[],!1,null,null,null);s.default=e.exports}}]);