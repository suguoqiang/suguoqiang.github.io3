(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{600:function(e,s,_){"use strict";_.r(s);var v=_(6),a=Object(v.a)({},(function(){var e=this,s=e.$createElement,_=e._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h4",{attrs:{id:"_1、什么是redis-简述它的优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是redis-简述它的优缺点"}},[e._v("#")]),e._v(" 1、什么是Redis？简述它的优缺点？")]),e._v(" "),_("p",[e._v("Redis本质上是一个Key-Value类型的内存数据库，很像memcached，整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据flush到硬盘上进行保存。")]),e._v(" "),_("p",[e._v("因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。")]),e._v(" "),_("p",[e._v("Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1GB，不像 memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能。")]),e._v(" "),_("p",[e._v("比方说用他的List来做FIFO双向链表，实现一个轻量级的高性 能消息队列服务，用他的Set可以做高性能的tag系统等等。")]),e._v(" "),_("p",[e._v("另外Redis也可以对存入的Key-Value设置expire时间，因此也可以被当作一 个功能加强版的memcached来用。 Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。")]),e._v(" "),_("h4",{attrs:{id:"_2、redis相比memcached有哪些优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、redis相比memcached有哪些优势"}},[e._v("#")]),e._v(" 2、Redis相比memcached有哪些优势？")]),e._v(" "),_("p",[e._v("(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型")]),e._v(" "),_("p",[e._v("(2) redis的速度比memcached快很多")]),e._v(" "),_("p",[e._v("(3) redis可以持久化其数据")]),e._v(" "),_("p",[e._v("(4) redis支持数据的备份，即 master-slave 模式的数据备份。")]),e._v(" "),_("p",[e._v("(5) 使用底层模型不同，它们之间底层实现方式 以及与客户端之间通信的应用协议不一样。Redis直接自己构建了VM 机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。")]),e._v(" "),_("p",[e._v("(6) redis最大存储的数据可以达到1GB，而memcache只有1MB")]),e._v(" "),_("p",[_("strong",[e._v("一致性可以分为最终一致性和强一致性")]),e._v("。数据库和缓存双写，就必然会存在不一致的问题。如果对数据有强一致性要求，不能放缓存。我们所做的一切，只能保证最终一致性。")]),e._v(" "),_("h4",{attrs:{id:"_3、redis支持哪几种数据类型-分别什么情况下使用。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、redis支持哪几种数据类型-分别什么情况下使用。"}},[e._v("#")]),e._v(" 3、Redis支持哪几种数据类型？分别什么情况下使用。")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("String     : 做一些复杂的计数功能的缓存。")])]),e._v(" "),_("li",[_("p",[e._v("List     :  做简单的消息队列的功能,分页等。")])]),e._v(" "),_("li",[_("p",[e._v("Set    :  全局去重的功能。")])]),e._v(" "),_("li",[_("p",[e._v("Sorted Set    : 排行榜应用,延迟任务，范围查找。")])]),e._v(" "),_("li",[_("p",[e._v("hash     : 存放对象。")])])]),e._v(" "),_("h4",{attrs:{id:"_4、redis主要消耗什么物理资源-内部实现。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、redis主要消耗什么物理资源-内部实现。"}},[e._v("#")]),e._v(" 4、Redis主要消耗什么物理资源？内部实现。")]),e._v(" "),_("p",[e._v("内存。内部实现采用epoll，采用了epoll+自己实现的简单的事件框架。epoll中的读、写、关闭、连接都转化成了事件，然后利用epoll的"),_("strong",[e._v("多路复用")]),e._v("特性，不在io上浪费一点时间 这3个条件不是相互独立的，特别是第一条，如果请求都是耗时的，采用单线程吞吐量及性能很差。redis为特殊的场景选择了合适的技术方案。")]),e._v(" "),_("blockquote",[_("p",[e._v("redis单线程：指的是网络请求模块使用了一个线程（所以不需考虑并发安全性），即一个线程处理所有网络请求，其他模块仍用了多个线程。redis线程安全问题：redis实际上是采用了线程封闭的观念，把任务封闭在一个线程，自然避免了线程安全问题，不过对于需要依赖多个redis操作的复合操作来说，依然需要锁，而且有可能是分布式锁。")])]),e._v(" "),_("h4",{attrs:{id:"_5、redis的全称是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5、redis的全称是什么"}},[e._v("#")]),e._v(" 5、Redis的全称是什么？")]),e._v(" "),_("p",[e._v("Remote Dictionary Server。")]),e._v(" "),_("h4",{attrs:{id:"_6、redis有哪几种数据淘汰策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6、redis有哪几种数据淘汰策略"}},[e._v("#")]),e._v(" 6、Redis有哪几种数据淘汰策略？")]),e._v(" "),_("p",[e._v("redis采用的是定期删除+惰性删除策略。")]),e._v(" "),_("p",[e._v("定期删除，redis默认每个100ms检查，是否有过期的key,有过期key则删除。需要说明的是，redis不是每个100ms将所有的key检查一次，而是随机抽取进行检查(如果每隔100ms,全部key进行检查，redis岂不是卡死)。因此，如果只采用定期删除策略，会导致很多key到时间没有删除。\n于是，惰性删除派上用场。也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。")]),e._v(" "),_("p",[e._v("在redis.conf中配置：")]),e._v(" "),_("div",{staticClass:"language-shell extra-class"},[_("pre",{pre:!0,attrs:{class:"language-shell"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maxmemory-policy volatile-lru")]),e._v("\n")])])]),_("p",[e._v("Redis中提供了6种数据淘汰策略：")]),e._v(" "),_("p",[_("code",[e._v("noeviction(默认策略)")]),e._v(": 禁止驱逐数据。 对于写请求不再提供服务，直接返回错误（DEL请求和部分特殊请求除外） 。")]),e._v(" "),_("p",[_("code",[e._v("allkeys-lru")]),e._v(":  从所有key中使用LRU算法（最近最少使用）进行淘汰 。")]),e._v(" "),_("p",[_("code",[e._v("allkeys-random")]),e._v(":  从所有key中随机淘汰数据 。")]),e._v(" "),_("p",[_("code",[e._v("volatile-lru")]),e._v(":  从设置了过期时间的key中使用LRU算法（最近最少使用））进行淘汰")]),e._v(" "),_("p",[_("code",[e._v("volatile-random")]),e._v(":  从设置了过期时间的key中随机淘汰。")]),e._v(" "),_("p",[_("code",[e._v("volatile-ttl")]),e._v(":  在设置了过期时间的key中，根据key的过期时间进行淘汰，越早过期的越优先被淘汰。")]),e._v(" "),_("blockquote",[_("p",[e._v("当使用"),_("strong",[e._v("volatile-lru")]),e._v("、"),_("strong",[e._v("volatile-random")]),e._v("、"),_("strong",[e._v("volatile-ttl")]),e._v("这三种策略时，如果没有key可以被淘汰，则和"),_("strong",[e._v("noeviction")]),e._v("一样返回错误")])]),e._v(" "),_("p",[e._v("获取当前的淘汰策略："),_("code",[e._v(">config get maxmemory-policy")]),e._v("和修改策略："),_("code",[e._v("config set maxmemory-policy allkeys-lru")]),e._v("。")]),e._v(" "),_("p",[e._v("通过配置文件设置："),_("code",[e._v("maxmemory-policy allkeys-lru")])]),e._v(" "),_("blockquote",[_("p",[e._v("实现方式：Redis使用的是近似LRU算法，它跟常规的LRU算法还不太一样。近似LRU算法通过随机采样法淘汰数据，每次随机出5（默认）个key，从里面淘汰掉最近最少使用的key。（可以通过maxmemory-samples参数修改采样数量，值越大越接近LRU）Redis为了实现近似LRU算法，给每个key增加了一个额外增加了一个24bit的字段，用来存储该key最后一次被访问的时间。")])]),e._v(" "),_("h4",{attrs:{id:"_7、redis官方为什么不提供windows版本"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7、redis官方为什么不提供windows版本"}},[e._v("#")]),e._v(" 7、Redis官方为什么不提供Windows版本？")]),e._v(" "),_("p",[e._v("因为目前Linux版本已经相当稳定，而且用户量很大，无需开发windows版本，反而会带来兼容性等问题。")]),e._v(" "),_("h4",{attrs:{id:"_8、一个字符串类型的值能存储最大容量是多少"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8、一个字符串类型的值能存储最大容量是多少"}},[e._v("#")]),e._v(" 8、一个字符串类型的值能存储最大容量是多少？")]),e._v(" "),_("p",[e._v("512M")]),e._v(" "),_("h4",{attrs:{id:"_9、redis的单线程问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9、redis的单线程问题"}},[e._v("#")]),e._v(" 9、Redis的单线程问题")]),e._v(" "),_("p",[e._v("单线程指的是网络请求模块使用了一个线程（所以不需考虑并发安全性），即一个线程处理所有网络请求，其他模块仍用了多个线程。")]),e._v(" "),_("p",[e._v("为什么说Redis能够快速执行")]),e._v(" "),_("p",[e._v("绝大部分请求是纯粹的内存操作（非常快速）")]),e._v(" "),_("p",[e._v("采用单线程,避免了不必要的上下文切换和竞争条件")]),e._v(" "),_("p",[e._v("非阻塞IO - IO多路复用")]),e._v(" "),_("h4",{attrs:{id:"_10、redis集群方案应该怎么做-都有哪些方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10、redis集群方案应该怎么做-都有哪些方案"}},[e._v("#")]),e._v(" 10、Redis集群方案应该怎么做？都有哪些方案？")]),e._v(" "),_("p",[e._v("1.codis。")]),e._v(" "),_("p",[e._v("目前用的最多的集群方案，基本和twemproxy一致的效果，但它支持在 节点数量改变情况下，旧节点数据可恢复到新hash节点。")]),e._v(" "),_("p",[e._v("2.redis cluster3.0自带的集群，特点在于他的分布式算法不是一致性hash，而是hash槽的概念，以及自身支持节点设置从节点。具体看官方文档介绍。")]),e._v(" "),_("p",[e._v("4.在业务代码层实现，起几个毫无关联的redis实例，在代码层，对key 进行hash计算，然后去对应的redis实例操作数据。 这种方式对hash层代码要求比较高，考虑部分包括，节点失效后的替代算法方案，数据震荡后的自动脚本恢复，实例的监控，等等。")]),e._v(" "),_("h4",{attrs:{id:"_11、redis集群方案什么情况下会导致整个集群不可用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11、redis集群方案什么情况下会导致整个集群不可用"}},[e._v("#")]),e._v(" 11、Redis集群方案什么情况下会导致整个集群不可用？")]),e._v(" "),_("p",[e._v("有A，B，C三个节点的集群,在没有复制模型的情况下,如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。")]),e._v(" "),_("h4",{attrs:{id:"_12、mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_12、mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据"}},[e._v("#")]),e._v(" 12、MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据？")]),e._v(" "),_("p",[e._v("redis内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。")]),e._v(" "),_("h4",{attrs:{id:"_13、redis有哪些适合的场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_13、redis有哪些适合的场景"}},[e._v("#")]),e._v(" 13、Redis有哪些适合的场景？")]),e._v(" "),_("p",[e._v("（1）会话缓存（Session Cache）")]),e._v(" "),_("p",[e._v("最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？")]),e._v(" "),_("p",[e._v("幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。")]),e._v(" "),_("p",[e._v("（2）全页缓存（FPC）")]),e._v(" "),_("p",[e._v("除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。")]),e._v(" "),_("p",[e._v("再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。")]),e._v(" "),_("p",[e._v("此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。")]),e._v(" "),_("p",[e._v("（3）队列")]),e._v(" "),_("p",[e._v("Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。")]),e._v(" "),_("p",[e._v("如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。")]),e._v(" "),_("p",[e._v("（4）排行榜/计数器")]),e._v(" "),_("p",[e._v("Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。")]),e._v(" "),_("p",[e._v("所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：")]),e._v(" "),_("p",[e._v("当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：")]),e._v(" "),_("p",[e._v("ZRANGE user_scores 0 10 WITHSCORES")]),e._v(" "),_("p",[e._v("Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。")]),e._v(" "),_("p",[e._v("（5）发布/订阅")]),e._v(" "),_("p",[e._v("最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！")]),e._v(" "),_("h4",{attrs:{id:"_14、redis支持的java客户端都有哪些-官方推荐用哪个"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_14、redis支持的java客户端都有哪些-官方推荐用哪个"}},[e._v("#")]),e._v(" 14、Redis支持的Java客户端都有哪些？官方推荐用哪个？")]),e._v(" "),_("p",[e._v("Redisson、Jedis、lettuce等等，官方推荐使用Redisson。")]),e._v(" "),_("h4",{attrs:{id:"_15、redis和redisson有什么关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15、redis和redisson有什么关系"}},[e._v("#")]),e._v(" 15、Redis和Redisson有什么关系？")]),e._v(" "),_("p",[e._v("Redisson是一个高级的分布式协调Redis客服端，能帮助用户在分布式环境中轻松实现一些Java的对象 (Bloom filter, BitSet, Set, SetMultimap, ScoredSortedSet, SortedSet, Map, ConcurrentMap, List, ListMultimap, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, ReadWriteLock, AtomicLong, CountDownLatch, Publish / Subscribe, HyperLogLog)。")]),e._v(" "),_("h4",{attrs:{id:"_16、jedis与redisson对比有什么优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_16、jedis与redisson对比有什么优缺点"}},[e._v("#")]),e._v(" 16、Jedis与Redisson对比有什么优缺点？")]),e._v(" "),_("p",[e._v("Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持；")]),e._v(" "),_("p",[e._v("Redisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。")]),e._v(" "),_("h4",{attrs:{id:"_17、redis如何设置密码及验证密码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_17、redis如何设置密码及验证密码"}},[e._v("#")]),e._v(" 17、Redis如何设置密码及验证密码？")]),e._v(" "),_("p",[e._v("设置密码：config set requirepass 123456")]),e._v(" "),_("p",[e._v("授权密码：auth 123456")]),e._v(" "),_("h4",{attrs:{id:"_18、说说redis哈希槽的概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_18、说说redis哈希槽的概念"}},[e._v("#")]),e._v(" 18、说说Redis哈希槽的概念？")]),e._v(" "),_("p",[e._v("Redis集群没有使用一致性hash,而是引入了哈希槽的概念，Redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。")]),e._v(" "),_("h4",{attrs:{id:"_19、redis集群的主从复制模型是怎样的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_19、redis集群的主从复制模型是怎样的"}},[e._v("#")]),e._v(" 19、Redis集群的主从复制模型是怎样的？")]),e._v(" "),_("p",[e._v("为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型,每个节点都会有N-1个复制品.")]),e._v(" "),_("p",[e._v("过程原理：")]),e._v(" "),_("p",[e._v("(1)当从库和主库建立MS关系后,会向主数据库发送SYNC命令")]),e._v(" "),_("p",[e._v("(2)主库接收到SYNC命令后会开始在后台保存快照(RDB持久化过程),并将期间接收到的写命令缓存起来")]),e._v(" "),_("p",[e._v("(3)当快照完成后,主Redis会将快照文件和所有缓存的写命令发送给从Redis")]),e._v(" "),_("p",[e._v("(4)从Redis接收到后,会载入快照文件并且执行收到的缓存的命令")]),e._v(" "),_("p",[e._v("(5)之后,主Redis每当接收到写命令时就会将命令发送从Redis，从而保证数据的一致")]),e._v(" "),_("p",[e._v("缺点：所有的slave节点数据的复制和同步都由master节点来处理,会照成master节点压力太大,使用主从从结构来解决")]),e._v(" "),_("h4",{attrs:{id:"_20、redis集群会有写操作丢失吗-为什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_20、redis集群会有写操作丢失吗-为什么"}},[e._v("#")]),e._v(" 20、Redis集群会有写操作丢失吗？为什么？")]),e._v(" "),_("p",[e._v("Redis并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。")]),e._v(" "),_("h4",{attrs:{id:"_21、redis集群之间是如何复制的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_21、redis集群之间是如何复制的"}},[e._v("#")]),e._v(" 21、Redis集群之间是如何复制的？")]),e._v(" "),_("p",[e._v("异步复制")]),e._v(" "),_("h4",{attrs:{id:"_22、redis集群最大节点个数是多少"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_22、redis集群最大节点个数是多少"}},[e._v("#")]),e._v(" 22、Redis集群最大节点个数是多少？")]),e._v(" "),_("p",[e._v("16384个。")]),e._v(" "),_("h4",{attrs:{id:"_23、redis集群如何选择数据库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_23、redis集群如何选择数据库"}},[e._v("#")]),e._v(" 23、Redis集群如何选择数据库？")]),e._v(" "),_("p",[e._v("Redis集群目前无法做数据库选择，默认在0数据库。")]),e._v(" "),_("h4",{attrs:{id:"_24、怎么测试redis的连通性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_24、怎么测试redis的连通性"}},[e._v("#")]),e._v(" 24、怎么测试Redis的连通性？")]),e._v(" "),_("p",[e._v("ping")]),e._v(" "),_("h4",{attrs:{id:"_25、redis中的管道有什么用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_25、redis中的管道有什么用"}},[e._v("#")]),e._v(" 25、Redis中的管道有什么用？")]),e._v(" "),_("p",[e._v("一次请求/响应服务器能实现处理新的请求即使旧的请求还未被响应。这样就可以将多个命令发送到服务器，而不用等待回复，最后在一个步骤中读取该答复。")]),e._v(" "),_("p",[e._v("这就是管道（pipelining），是一种几十年来广泛使用的技术。例如许多POP3协议已经实现支持这个功能，大大加快了从服务器下载新邮件的过程。")]),e._v(" "),_("h4",{attrs:{id:"_26、怎么理解redis事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_26、怎么理解redis事务"}},[e._v("#")]),e._v(" 26、怎么理解Redis事务？")]),e._v(" "),_("p",[e._v("事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。")]),e._v(" "),_("p",[e._v("事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。")]),e._v(" "),_("p",[e._v("高并发下，解决key的锁的问题：")]),e._v(" "),_("p",[e._v("(1)如果对这个key操作，"),_("strong",[e._v("不要求顺序")])]),e._v(" "),_("p",[e._v("这种情况下，准备一个分布式锁，大家去抢锁，抢到锁就做set操作即可，比较简单。")]),e._v(" "),_("p",[e._v("(2)如果对这个key操作，"),_("strong",[e._v("要求顺序")])]),e._v(" "),_("p",[e._v("假设有一个key1,系统A需要将key1设置为valueA,系统B需要将key1设置为valueB,系统C需要将key1设置为valueC.")]),e._v(" "),_("p",[e._v("期望按照key1的value值按照 valueA--\x3evalueB--\x3evalueC的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个时间戳。假设时间戳如下")]),e._v(" "),_("h4",{attrs:{id:"_27、redis事务相关的命令有哪几个"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_27、redis事务相关的命令有哪几个"}},[e._v("#")]),e._v(" 27、Redis事务相关的命令有哪几个？")]),e._v(" "),_("p",[e._v("MULTI、EXEC、DISCARD、WATCH")]),e._v(" "),_("h4",{attrs:{id:"_28、redis-key的过期时间和永久有效分别怎么设置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_28、redis-key的过期时间和永久有效分别怎么设置"}},[e._v("#")]),e._v(" 28、Redis key的过期时间和永久有效分别怎么设置？")]),e._v(" "),_("p",[e._v("EXPIRE 和 PERSIST 命令。")]),e._v(" "),_("h4",{attrs:{id:"_29、redis如何做内存优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_29、redis如何做内存优化"}},[e._v("#")]),e._v(" 29、Redis如何做内存优化？")]),e._v(" "),_("p",[e._v("尽可能使用散列表（hash），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。")]),e._v(" "),_("p",[e._v("比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key,而是应该把这个用户的所有信息存储到一张散列表里面。")]),e._v(" "),_("h4",{attrs:{id:"_30、redis回收进程如何工作的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_30、redis回收进程如何工作的"}},[e._v("#")]),e._v(" 30、Redis回收进程如何工作的？")]),e._v(" "),_("p",[e._v("(1)一个客户端运行了新的命令，添加了新的数据。")]),e._v(" "),_("p",[e._v("(2)Redi检查内存使用情况，如果大于maxmemory的限制, 则根据设定好的策略进行回收。")]),e._v(" "),_("p",[e._v("(3)一个新的命令被执行，等等。")]),e._v(" "),_("p",[e._v("所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。")]),e._v(" "),_("p",[e._v("如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。")]),e._v(" "),_("h4",{attrs:{id:"_31、缓存穿透、缓存击穿和缓存雪崩的问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_31、缓存穿透、缓存击穿和缓存雪崩的问题"}},[e._v("#")]),e._v(" 31、缓存穿透、缓存击穿和缓存雪崩的问题")]),e._v(" "),_("ul",[_("li",[e._v("缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。")]),e._v(" "),_("li",[e._v("缓存击穿：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。")]),e._v(" "),_("li",[e._v("缓存雪崩：当缓存服务器重启或者大量缓存集中在某一个时间段失效。这样在失效的时候，也会给后端系统(比如DB)带来很大压力。")])]),e._v(" "),_("blockquote",[_("p",[e._v("简言之，三者都是请求透过缓存直接访问数据库，不同的是原因，缓存挂了导致的是雪崩，缓存过期导致的是击穿，恶意访问不存在的数据导致的是穿透。")])]),e._v(" "),_("p",[_("strong",[e._v("缓存穿透解决方案")]),e._v(":")]),e._v(" "),_("p",[e._v("(二)采用异步更新策略，无论key是否取到值，都直接返回。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做"),_("strong",[e._v("缓存预热")]),e._v("(项目启动前，先加载缓存)操作。特别注意空对象，也进行缓存。")]),e._v(" "),_("p",[e._v("(三)提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的key。迅速判断出，请求所携带的Key是否合法有效。如果不合法，则直接返回。")]),e._v(" "),_("p",[_("strong",[e._v("缓存击穿解决方案")]),e._v("：")]),e._v(" "),_("p",[e._v("(一)利用互斥锁(mutex key)，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试。比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。")]),e._v(" "),_("p",[_("strong",[e._v("缓存雪崩解决方案")]),e._v(":")]),e._v(" "),_("p",[e._v("(一)给key设置缓存的失效时间。可加上一个随机值，避免集体失效。")]),e._v(" "),_("p",[e._v("(二)使用互斥锁或者队列。但是该方案吞吐量明显下降了。")]),e._v(" "),_("p",[e._v("(三)设置过期标志更新缓存。")]),e._v(" "),_("p",[e._v("(四)双缓存。我们有两个缓存，缓存A和缓存B。缓存A的失效时间为20分钟，缓存B不设失效时间。自己做缓存预热操作。然后细分以下几个小点")]),e._v(" "),_("ul",[_("li",[e._v("I 从缓存A读数据库，有则直接返回")]),e._v(" "),_("li",[e._v("II A没有数据，直接从B读数据，直接返回，并且异步启动一个更新线程。")]),e._v(" "),_("li",[e._v("III 更新线程同时更新缓存A和缓存B。")])]),e._v(" "),_("h4",{attrs:{id:"_32、redis两种持久化方式的优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_32、redis两种持久化方式的优缺点"}},[e._v("#")]),e._v(" 32、Redis两种持久化方式的优缺点")]),e._v(" "),_("ul",[_("li",[e._v("RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）")]),e._v(" "),_("li",[e._v("AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。")])]),e._v(" "),_("p",[e._v("Redis 还可以同时使用 AOF 持久化和 RDB 持久化。当redis重启时,它会有限使用AOF文件来还原数据集,因为AOF文件保存的数据集通常比RDB文件所保存的数据集更加完整")]),e._v(" "),_("p",[e._v("RDB的优点：")]),e._v(" "),_("p",[e._v("RDB 是一个非常紧凑（compact）的文件，它保存了 Redis 在某个时间点上的数据集。 这种文件非常适合用于进行备份： 比如说，你可以在最近的 24 小时内，每小时备份一次 RDB 文件，并且在每个月的每一天，也备份一个 RDB 文件。 这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。")]),e._v(" "),_("p",[e._v("RDB 非常适用于灾难恢复（disaster recovery）：它只有一个文件，并且内容都非常紧凑，可以（在加密后）将它传送到别的数据中心，或者亚马逊 S3 中。")]),e._v(" "),_("p",[e._v("RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I/O 操作。")]),e._v(" "),_("p",[e._v("RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快")]),e._v(" "),_("h4",{attrs:{id:"_33、redis常见的性能问题都有哪些-如何解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_33、redis常见的性能问题都有哪些-如何解决"}},[e._v("#")]),e._v(" 33、Redis常见的性能问题都有哪些？如何解决？")]),e._v(" "),_("p",[e._v("Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。")]),e._v(" "),_("p",[e._v("Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。")]),e._v(" "),_("p",[e._v("Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。")]),e._v(" "),_("p",[e._v("Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内")]),e._v(" "),_("h4",{attrs:{id:"_34、redis常见性能问题和解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_34、redis常见性能问题和解决方案"}},[e._v("#")]),e._v(" 34、Redis常见性能问题和解决方案？")]),e._v(" "),_("p",[e._v("(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件")]),e._v(" "),_("p",[e._v("(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次")]),e._v(" "),_("p",[e._v("(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内")]),e._v(" "),_("p",[e._v("(4) 尽量避免在压力很大的主库上增加从库")]),e._v(" "),_("p",[e._v("(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1 <- Slave2 <- Slave3...")]),e._v(" "),_("p",[e._v("这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。")]),e._v(" "),_("h4",{attrs:{id:"_35、redis三种过期策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_35、redis三种过期策略"}},[e._v("#")]),e._v(" 35、Redis三种过期策略")]),e._v(" "),_("p",[e._v("1）定时删除：在设置key的过期时间的同时，为该key创建一个定时器，让定时器在key的过期时间来临时，对key进行删除。")]),e._v(" "),_("p",[e._v("2）懒汉式式删除：key过期的时候不删除，每次通过key获取值的时候去检查是否过期，若过期，则删除，返回null。")]),e._v(" "),_("p",[e._v("3）定期删除：每隔一段时间执行一次删除过期key操作。")]),e._v(" "),_("blockquote",[_("p",[e._v("redis 采用的是 懒汉式删除+定期删除")])])])}),[],!1,null,null,null);s.default=a.exports}}]);