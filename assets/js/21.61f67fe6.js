(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{516:function(n,t,a){"use strict";a.r(t);var e=a(6),o=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h3",{attrs:{id:"地理坐标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#地理坐标"}},[n._v("#")]),n._v(" 地理坐标")]),n._v(" "),a("blockquote",[a("p",[n._v("地理坐标点不能被动态映射自动检测，需要显式声明对应字段类型为"),a("code",[n._v("geo-point")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('PUT /attractions\n{\n  "mappings": {\n    "restaurant": {\n      "properties": {\n        "name": {\n          "type": "text"\n        },\n        "location": {\n          "type": "geo_point"\n        }\n      }\n    }\n  }\n}\n')])])]),a("p",[n._v("经纬度信息的形式可以是字符串、数组、对象或者geohash,所以对应有四种插入方法：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('PUT /attractions/restaurant/1\n{\n  "name": "Chipotle Mexican Grill",\n  "location": "40.715, -74.011"               #字符串形式\n}\n\nPUT /attractions/restaurant/2\n{\n  "name": "Pala Pizza",\n  "location": {                             #对象形式\n    "lat":  40.722,\n    "lon":  -73.989\n  }\n}\n\nPUT /attractions/restaurant/3\n{\n  "name": "Mini Munchies Pizza",\n  "location": [ -73.983, 40.719 ]             #数组形式\n}\n\nPUT /attractions/restaurant/4\n{ \n  "name": "Geo-point as a geohash",\n  "location": "drm3btev3e86"                    #geohash形式\n}\n')])])]),n._v(" "),a("p",[n._v("使用地理边界框查询，可查找框内的所有地理点：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('GET /attractions/_search\n{ \n  "query":{ \n    "geo_bounding_box": {\n      "location":{ \n        "top_left":{ \n          "lat":42,\n          "lon":-72 \n         },\n        "bottom_right":{ \n          "lat":40,\n          "lon":-74 \n        } \n      } \n    } \n  } \n}\n')])])]),a("blockquote",[a("p",[n._v('注意点：用字符串形式表示时，是纬度在前，经度在后（ "latitude,longitude" ），而数组形式表示时，是经度在前，纬度在后')])]),n._v(" "),a("h4",{attrs:{id:"地理坐标盒模型过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#地理坐标盒模型过滤器"}},[n._v("#")]),n._v(" 地理坐标盒模型过滤器")]),n._v(" "),a("p",[n._v("有四种地理坐标点相关的过滤方式可以用来选中或者排除文档：")]),n._v(" "),a("p",[a("code",[n._v("geo_bounding_box")]),n._v(":\n找出落在指定矩形框中的坐标点\n"),a("code",[n._v("geo_distance")]),n._v(":\n找出与指定位置在给定距离内的点\n"),a("code",[n._v("geo_distance_range:")]),n._v(":\n找出与指定点距离在给定最小距离和最大距离之间的点\n"),a("code",[n._v("geo_polygon:")]),n._v(":\n找出落在多边形中的点。这个过滤器使用代价很大。当你觉得自己需要使用它，最好先看看 geo-shapes")]),n._v(" "),a("blockquote",[a("p",[n._v("这是目前为止最有效的地理坐标过滤器了，因为它计算起来非常简单。你指定一个矩形的顶部,底部,左边界，和右边界，\n然后过滤器只需判断坐标的经度是否在左右边界之间，纬度是否在上下边界之间")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('GET my_index/_search\n{\n  "query": {\n    "geo_bounding_box": { \n      "location": {\n        "top_left": {\n          "lat": 42,\n          "lon": -72\n        },\n        "bottom_right": {\n          "lat": 40,\n          "lon": -74\n        }\n      }\n    }\n  }\n}\n')])])])])}),[],!1,null,null,null);t.default=o.exports}}]);