(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{643:function(t,a,s){"use strict";s.r(a);var e=s(6),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"高可用的设计原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高可用的设计原则"}},[t._v("#")]),t._v(" 高可用的设计原则")]),t._v(" "),s("ul",[s("li",[t._v("AKF拆分原则")]),t._v(" "),s("li",[t._v("前后端分离")]),t._v(" "),s("li",[t._v("无状态服务")]),t._v(" "),s("li",[t._v("Restful通信风格")])]),t._v(" "),s("h4",{attrs:{id:"akf拆分原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#akf拆分原则"}},[t._v("#")]),t._v(" AKF拆分原则")]),t._v(" "),s("p",[t._v("拆分方式：按照不同服务功能进行拆分\n拆分要点：高内聚，低耦合。一个服务尽量完成一个功能，减少服务间的频繁调用。")]),t._v(" "),s("h4",{attrs:{id:"前后端分离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前后端分离"}},[t._v("#")]),t._v(" 前后端分离")]),t._v(" "),s("p",[t._v("前端专注页面展示，布局以及多场景集成。后端提供统一的数据和模型供前端访问。")]),t._v(" "),s("h4",{attrs:{id:"无状态服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无状态服务"}},[t._v("#")]),t._v(" 无状态服务")]),t._v(" "),s("p",[t._v("如果一个数据需要被多个服务共享，才能完成一笔交易，那么这个数据被称为状态。进而依赖这个“状态”数据的服务被称为有状态服务，反之称为无状态服务。简单点说就是，应该把缓存的数据迁移到分布式缓存中存储，让业务服务变成一个无状态的计算节点")]),t._v(" "),s("h4",{attrs:{id:"restful通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#restful通信"}},[t._v("#")]),t._v(" Restful通信")]),t._v(" "),s("p",[t._v("无状态协议HTTP，扩展能力很强。JSON 报文序列化，轻量简单。语言无关，支持广泛。")]),t._v(" "),s("blockquote",[s("p",[t._v("当然，微服务也带来了一系列的问题：分布式事务的处理（主要指的是数据最终达到一直状态），依赖服务不稳定，模块重复构建等。")])]),t._v(" "),s("h3",{attrs:{id:"高可用服务注册中心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高可用服务注册中心"}},[t._v("#")]),t._v(" 高可用服务注册中心")]),t._v(" "),s("p",[t._v("构建双节点(多结点)的服务注册中心,通过进行互相注册的方式来实现高可用的部署。")]),t._v(" "),s("div",{staticClass:"language-properties extra-class"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##application-peer1.properties")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.application.name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("eureka-server")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1111")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("eureka.instance.hostname")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("peer1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("eureka.client.serviceUrl.defaultZone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http://peer2:1112/eureka/")]),t._v("\n")])])]),s("div",{staticClass:"language-properties extra-class"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## application-peer2.properties")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.application.name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("eureka-server")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1112")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("eureka.instance.hostname")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("peer2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("eureka.client.serviceUrl.defaultZone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http://peer1:1111/eureka/")]),t._v("\n")])])]),s("p",[t._v("在host文件里面添加：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1 peer1\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1 peer2\n")])])]),s("p",[t._v("指定程序启动时的一些额外配置：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("java -jar eureka-server-1.0.0.jar --spring.profiles.active"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("peer1\njava -jar eureka-server-1.0.0.jar --spring.profiles.active"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("peer2\n")])])]),s("p",[t._v("在微服务的配置文件里指明,即可实现微服务的双向同时注册")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("spring.application.name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("compute-service\nserver.port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2222")]),t._v("\neureka.client.serviceUrl.defaultZone"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("http://peer1:1111/eureka/,http://peer2:1112/eureka/\n")])])]),s("p",[t._v("一般构建集群服务，都是通过两两相互注册，形成环路，实现集群中节点完全对等的效果，即当某一个节点故障不可用时，仍然可以通过其他节点进行访问。\n常用的架构图为："),s("img",{attrs:{src:"http://cdn.gqsu.top/springCloud05-1.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"服务熔断、限流、降级处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务熔断、限流、降级处理"}},[t._v("#")]),t._v(" 服务熔断、限流、降级处理")]),t._v(" "),s("p",[t._v("主要用于解决高并发时系统的可靠性。")]),t._v(" "),s("h4",{attrs:{id:"服务熔断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务熔断"}},[t._v("#")]),t._v(" 服务熔断")]),t._v(" "),s("p",[t._v('在微服务架构中，当调用某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。\n这种方法，可以避免系统崩溃，引起"雪崩效应"。当检测到该节点微服务调用响应正常后，恢复调用链路。')]),t._v(" "),s("p",[t._v("在Spring Cloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。\n（在dubbo中也可利用nio超时+失败次数做熔断。 ）")]),t._v(" "),s("h4",{attrs:{id:"服务降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务降级"}},[t._v("#")]),t._v(" 服务降级")]),t._v(" "),s("p",[t._v("从RPC调用环节来讲，就是去访问一个本地的伪装者而不是真实的服务。通常用@Component去实现@Feign的接口，自定义不可用的返回值。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@FeignClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yl-user-admin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fallback "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserInfoFeignServiceImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserInfoFeign")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"api/user/info"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RequestMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestParam")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Slf4j")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserInfoFeignServiceImpl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserInfoFeign")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("warn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"userAdmin服务不可用！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("最后，一定不要忘了：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###application.yml")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("feign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hystrix")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enabled")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("connectTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6000")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("readTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6000")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("loggerLevel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" basic\n")])])]),s("h4",{attrs:{id:"服务限流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务限流"}},[t._v("#")]),t._v(" 服务限流")]),t._v(" "),s("p",[t._v("可以概括为：")]),t._v(" "),s("ul",[s("li",[t._v("对请求的目标URL进行限流（例如：某个URL每分钟只允许调用多少次）")]),t._v(" "),s("li",[t._v("对客户端的访问IP进行限流（例如：某个IP每分钟只允许请求多少次）")]),t._v(" "),s("li",[t._v("对某些特定用户或者用户组进行限流（例如：非VIP用户限制每分钟只允许调用100次某个API等）")]),t._v(" "),s("li",[t._v("多维度混合的限流。此时，就需要实现一些限流规则的编排机制。与、或、非等关系。")])]),t._v(" "),s("p",[t._v("限制总并发数（比如数据库连接池、线程池）、限制瞬时并发数（如nginx的limit_conn模块，用来限制瞬时并发连接数）、限制时间窗口内的平均速率\n（如Guava的RateLimiter、nginx的limit_req模块，限制每秒的平均速率）；其他还有如限制远程接口调用速率、限制MQ的消费速率。\n另外还可以根据网络连接数、网络流量、CPU或内存负载等来限流。")]),t._v(" "),s("p",[t._v("常见场景：拒绝服务（定向到错误页或告知资源没有了）、排队或等待（比如秒杀、评论、下单）、降级（返回兜底数据或默认数据，如商品详情页库存默认有货）。")])])}),[],!1,null,null,null);a.default=n.exports}}]);