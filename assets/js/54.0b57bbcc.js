(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{548:function(e,t,a){"use strict";a.r(t);var s=a(6),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"accesskey-secretkey-开放平台"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accesskey-secretkey-开放平台"}},[e._v("#")]),e._v(" AccessKey&SecretKey （开放平台）")]),e._v(" "),a("h4",{attrs:{id:"请求身份"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求身份"}},[e._v("#")]),e._v(" 请求身份")]),e._v(" "),a("p",[e._v("为开发者分配AccessKey（开发者标识，确保唯一）和SecretKey（用于接口加密，确保不易被穷举，生成算法不易被猜测）。")]),e._v(" "),a("h4",{attrs:{id:"防止篡改-参数签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防止篡改-参数签名"}},[e._v("#")]),e._v(" 防止篡改，参数签名")]),e._v(" "),a("ul",[a("li",[e._v("按照请求参数名的字母升序排列非空请求参数（包含AccessKey），使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串stringA；")]),e._v(" "),a("li",[e._v("在stringA最后拼接上Secretkey得到字符串stringSignTemp；")]),e._v(" "),a("li",[e._v("对stringSignTemp进行MD5运算，并将得到的字符串所有字符转换为大写，得到sign值。")])]),e._v(" "),a("p",[e._v("请求携带参数"),a("code",[e._v("AccessKey")]),e._v("和"),a("code",[e._v("Sign")]),e._v("，只有拥有合法的身份AccessKey和正确的签名Sign才能放行。这样就解决了身份验证和参数篡改问题，即使请求参数被劫持，由于获取不到SecretKey（仅作本地加密使用，不参与网络传输），无法伪造合法的请求。")]),e._v(" "),a("h4",{attrs:{id:"重放攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重放攻击"}},[e._v("#")]),e._v(" 重放攻击")]),e._v(" "),a("p",[e._v("虽然解决了请求参数被篡改的隐患，但是还存在着重复使用请求参数伪造二次请求的隐患。")]),e._v(" "),a("h4",{attrs:{id:"timestamp-nonce方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timestamp-nonce方案"}},[e._v("#")]),e._v(" timestamp+nonce方案")]),e._v(" "),a("p",[a("code",[e._v("nonce")]),e._v("指唯一的随机字符串，用来标识每个被签名的请求。通过为每个请求提供一个唯一的标识符，服务器能够防止请求被多次使用（记录所有用过的nonce以阻止它们被二次使用）。\n然而，对服务器来说永久存储所有接收到的nonce的代价是非常大的。可以使用"),a("code",[e._v("timestamp")]),e._v("来优化nonce的存储。")]),e._v(" "),a("p",[e._v("假设允许客户端和服务端最多能存在15分钟的时间差，同时追踪记录在服务端的nonce集合。当有新的请求进入时，首先检查携带的timestamp是否在15分钟内，如超出时间范围，则拒绝，然后查询携带的nonce，如存在已有集合，则拒绝。否则，记录该nonce，并删除集合内时间戳大于15分钟的nonce（可以使用redis的expire，新增nonce的同时设置它的超时失效时间为15分钟）。")]),e._v(" "),a("h3",{attrs:{id:"实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[e._v("#")]),e._v(" 实现")]),e._v(" "),a("p",[e._v("请求接口：http://api.test.com/test?name=hello&home=world&work=java")]),e._v(" "),a("h4",{attrs:{id:"客户端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端"}},[e._v("#")]),e._v(" 客户端")]),e._v(" "),a("ul",[a("li",[e._v("生成当前时间戳timestamp=now和唯一随机字符串nonce=random")]),e._v(" "),a("li",[e._v('按照请求参数名的字母升序排列非空请求参数（包含AccessKey)stringA="AccessKey=access&home=world&name=hello&work=java×tamp=now&nonce=random";')]),e._v(" "),a("li",[e._v('拼接密钥SecretKeystringSignTemp="AccessKey=access&home=world&name=hello&work=java×tamp=now&nonce=random&SecretKey=secret";')]),e._v(" "),a("li",[e._v("MD5并转换为大写sign=MD5(stringSignTemp).toUpperCase();")]),e._v(" "),a("li",[e._v("最终请求http://api.test.com/test?name=hello&home=world&work=java×tamp=now&nonce=nonce&sign=sign;")])]),e._v(" "),a("h4",{attrs:{id:"服务端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端"}},[e._v("#")]),e._v(" 服务端")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://cdn.gqsu.top/api01-1.jpg",alt:""}})]),e._v(" "),a("h4",{attrs:{id:"token-appkey-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token-appkey-app"}},[e._v("#")]),e._v(" Token&AppKey（APP）")]),e._v(" "),a("p",[e._v("在APP开放API接口的设计中，由于大多数接口涉及到用户的个人信息以及产品的敏感数据，所以要对这些接口进行身份验证，为了安全起见让用户暴露的明文密码次数越少越好，然而客户端与服务器的交互在请求之间是无状态的，也就是说，当涉及到用户状态时，每次请求都要带上身份验证信息。")]),e._v(" "),a("h4",{attrs:{id:"token身份验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token身份验证"}},[e._v("#")]),e._v(" Token身份验证")]),e._v(" "),a("ul",[a("li",[e._v("用户登录向服务器提供认证信息（如账号和密码），服务器验证成功后返回Token给客户端；")]),e._v(" "),a("li",[e._v("客户端将Token保存在本地，后续发起请求时，携带此Token；")]),e._v(" "),a("li",[e._v("服务器检查Token的有效性，有效则放行，无效（Token错误或过期）则拒绝。")]),e._v(" "),a("li",[e._v("安全隐患：Token被劫持，伪造请求和篡改参数。")])]),e._v(" "),a("h4",{attrs:{id:"token-appkey签名验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token-appkey签名验证"}},[e._v("#")]),e._v(" Token+AppKey签名验证")]),e._v(" "),a("p",[e._v("与上面开发平台的验证方式类似，为客户端分配AppKey（密钥，用于接口加密，不参与传输），将AppKey和所有请求参数组合成源串，根据签名算法生成签名值，发送请求时将签名值一起发送给服务器验证。\n这样，即使Token被劫持，对方不知道AppKey和签名算法，就无法伪造请求和篡改参数。再结合上述的重发攻击解决方案，即使请求参数被劫持也无法伪造二次重复请求。")]),e._v(" "),a("h4",{attrs:{id:"实现-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-2"}},[e._v("#")]),e._v(" 实现")]),e._v(" "),a("p",[e._v("登陆和退出请求")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://cdn.gqsu.top/api01-2.jpg",alt:""}})]),e._v(" "),a("h4",{attrs:{id:"后续请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后续请求"}},[e._v("#")]),e._v(" 后续请求")]),e._v(" "),a("p",[e._v("客户端")]),e._v(" "),a("ul",[a("li",[e._v("和上述开放平台的客户端行为类似，把AccessKey改为token即可。\n服务端")])]),e._v(" "),a("p",[a("img",{attrs:{src:"http://cdn.gqsu.top/api01-3.jpg",alt:""}})])])}),[],!1,null,null,null);t.default=n.exports}}]);